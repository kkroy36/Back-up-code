% Running on host: shyamals-air

% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.

% Calling ILPouterLoop from createRegressionOuterLooper.

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=0: args[N]=train/train_pos.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=1: args[N]=train/train_neg.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=2: args[N]=train/train_bk.txt

% getInputArgWithDefaultValue: args=[train/train_pos.txt, train/train_neg.txt, train/train_bk.txt, train/train_facts.txt]
%  for N=3: args[N]=train/train_facts.txt

% Welcome to the WILL ILP/SRL systems.


% Switching to VarIndicator = uppercase.

% Unset'ing VarIndicator.
% Reading background theory from dir: null

% Switching to VarIndicator = uppercase.

***** Warning: % Since this is the first setting of the notation for variables, will keep:
%   variableIndicator = uppercase *****

% [ LazyGroundClauseIndex ]  Building full index for mode/1 with 1 assertions.
% LoadAllModes() called.  Currently loaded modes: []
% [ LazyGroundClauseIndex ]  Building full index for sameAs/2 with 2 assertions.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for exp/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for log/3.
% LoadAllLibraries() called.  Currently loaded libraries: [listsInLogic, differentInLogic, modes_arithmeticInLogic, inlines_comparisonInLogic, modes_listsInLogic, inlines_differentInLogic, modes_differentInLogic, arithmeticInLogic, inlines_listsInLogic, modes_comparisonInLogic, comparisonInLogic, inlines_arithmeticInLogic]

%  Read the facts.
%  Have read 1,030 facts.

%  LearnOneClause initialized.

% The outer looper has been created.

% Initializing the ILP inner looper.
% Have read 103 examples from 'train' [train/train*].

% NEW target:                 value(D)
%  targetPred:                value/1
%  targetArgTypes:            signature = [const], types = [+State]
%  targets:                   [value(D)]
%  targetPredicates:          [value/1]
%  targetArgSpecs:            [[D[+State]]]
%  variablesInTargets:        [[D]]

% Started collecting constants

% Collecting the types of constants.

% Looking at the training examples to see if any types of new constants can be inferred.
% Time to collect constants: 23 milliseconds
% Time to collect examples: 0 seconds

% Read 103 pos examples and 0 neg examples.
% Time to init learnOneClause: 43 milliseconds
% Old dirnull
Setting model dir

% Have 103 'raw' positive examples and kept 103.
% Have 0 'raw' negative examples and kept 0.
% No neg ex for value

% processing backup's for value
%  POS EX = 103
%  NEG EX = 0

% Memory usage by WILLSetup (just counts # targets?):
%  |backupPosExamples| = 1
%  |backupNegExamples| = 1
%  |predicatesAsFacts| = 0
%  |addedToFactBase|   = 0
train/models/
File: train/advice.txt doesnt exist.Hence no advice loaded

% Learn model for: value
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:511.24133119371413
Set score:0.0025
% Dataset size: 103
Computing probabilities
prob time:4 milliseconds
No hidden examples for : value
Time to build dataset: 4 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:511.24133119371413
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 2 14 18 23 65 66 68 79 91 93
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% LearnOneClause Parameters:
%   Targets (1):
%    value(+State)
%  Modes (42):
%    tIn(+Truck, #City, +State),
%    tIn(-Truck, #City, +State),
%    bIn(+Box, #City, +State),
%    bIn(-Box, #City, +State),
%    bOn(+Box, -Truck, +State),
%    bOn(-Box, +Truck, +State),
%    addList(+willList, #willNumber),
%    multiplyList(+willList, #willNumber),
%    abs(+willNumber, &willNumber),
%    minus(+willNumber, &willNumber),
%    minus(+willNumber, +willNumber, &willNumber),
%    plus(+willNumber, +willNumber, &willNumber),
%    mult(+willNumber, +willNumber, &willNumber),
%    div(+willNumber, +willNumber, &willNumber),
%    allNumbers(+willList),
%    positiveNumber(+willNumber),
%    negativeNumber(+willNumber),
%    in0toDot001(+willNumber),
%    in0toDot01(+willNumber),
%    in0toDot1(+willNumber),
%    in0to1(+willNumber),
%    in0to10(+willNumber),
%    in0to100(+willNumber),
%    in0to1000(+willNumber),
%    equalWithTolerance(+willNumber, +willNumber, &willNumber),
%    greaterOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    smallerOrEqualDifference(+willNumber, +willNumber, &willNumber),
%    isaEqualTolerance(+willNumber),
%    lessThan(+willNumber, +willNumber),
%    greaterThan(+willNumber, +willNumber),
%    lessThanOrEqual(+willNumber, +willNumber),
%    greaterThanOrEqual(+willNumber, +willNumber),
%    inBetweenOO(+willNumber, +willNumber, +willNumber),
%    inBetweenCO(+willNumber, +willNumber, +willNumber),
%    inBetweenOC(+willNumber, +willNumber, +willNumber),
%    inBetweenCC(+willNumber, +willNumber, +willNumber),
%    memberOfList(+willAnything, +willList),
%    firstInList(+willList, &willAnything),
%    restOfList(+willList, &willList),
%    positionInList(+willAnything, +willList, &willNumber),
%    nthInList(+willNumber, +willList, &willAnything),
%    lengthOfList(+willList, &willNumber)

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for tIn/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for bIn/3.
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -52,219.369433 (regressionFit = 52,219.369432, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -52,219.369433): value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,812.415113 (regressionFit = 46,812.415112, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,812.415113): value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46812.415113459516
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for tIn/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 1:  Building full index for bOn/3.
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -49,344.599045 (regressionFit = 49,344.599043, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,812.415114 (regressionFit = 46,812.415112, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,812.415115 (regressionFit = 46,812.415112, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -50,957.374277 (regressionFit = 50,957.374274, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-52219.36943273917
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -52,219.369434 (regressionFit = 52,219.369432, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -49,344.599045 (regressionFit = 49,344.599043, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -52,219.369434 (regressionFit = 52,219.369432, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -52,613.521638 (regressionFit = 52,613.521635, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for bIn/3.
% [ LazyGroundNthArgumentClauseIndex ]  Argument 0:  Building full index for bOn/3.
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -52,219.369434 (regressionFit = 52,219.369432, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,812.415115 (regressionFit = 46,812.415112, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 463.1635214862297 to score=0.0025 #egs=93.0
Comparing variance: 373.82076141001636 to score=0.0025 #egs=10.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 93.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-463.163521)
%         ILP node to extend: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -463.163521) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 10.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-373.820761)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -373.820761) into the LAST position (#2) in the search queue.

% Time for loop #1: 565 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 93 positive examples, of which 93 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]'
%     Score = -46,812.415113 (regressionFit = 46,812.415112, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]

% Have these 10 positive seeds: 13 15 16 30 38 42 47 65 70 79
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,812.415113): value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-46812.415113459516
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,797.831743 (regressionFit = 42,797.831741, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,797.831743): value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,996.103517 (regressionFit = 42,996.103515, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]' score=-42797.831742762464
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -42,797.831744 (regressionFit = 42,797.831741, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,797.831744 (regressionFit = 42,797.831741, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,797.831744 (regressionFit = 42,797.831741, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,816.881452 (regressionFit = 42,816.881449, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,645.635902 (regressionFit = 42,645.635899, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,645.635902): value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]' score=-42996.103516921656
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -42,996.103518 (regressionFit = 42,996.103515, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,816.881452 (regressionFit = 42,816.881449, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,996.103518 (regressionFit = 42,996.103515, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,996.103518 (regressionFit = 42,996.103515, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,797.831744 (regressionFit = 42,797.831741, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,996.103518 (regressionFit = 42,996.103515, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,996.103518 (regressionFit = 42,996.103515, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-Infinity
% [ LazyGroundClauseIndex ]  Building full index for bOn/3 with 361 assertions.
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,797.831744 (regressionFit = 42,797.831741, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,996.103518 (regressionFit = 42,996.103515, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -463.164.
% Will extend: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2549110341032 to score=0.0025 #egs=83.0
Comparing variance: 4.547828340945694 to score=0.0025 #egs=10.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-513.254911)
%         ILP node to extend: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -513.254911) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 10.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-4.547828)
%         ILP node to extend: value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -4.547828) into the LAST position (#3) in the search queue.

% Time for loop #2: 738 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -42,645.635902 (regressionFit = 42,645.635899, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 10 positive seeds: 5 6 15 25 35 46 48 54 55 65
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,645.635902): value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-42645.63590242002
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -513.255.
% Will extend: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0025 #egs=78.0
Comparing variance: 10.517819866922945 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -545.477570) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 1.593 seconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 12 22 51 57 69 71 77
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon1879, Anon1087, D))

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null
Created a leaf under (value(D) :- tIn(Anon1087, destination, D))

% Working on expanding this node: 'value(A) :- tIn(_, destination, A).  [covers 93.0/10.0 pos, 0.0/0.0 neg]'
%     Score = -46,812.415113 (regressionFit = 46,812.415112, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Have these 10 positive seeds: 0 1 2 3 4 5 6 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,812.415113): value(A) :- tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-46812.415113459516
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -0.000002 (regressionFit = 3.41061e-13, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000002): value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = 3.41061e-13, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000002): value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]' score=-2.1500003410605138E-6
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -0.000003 (regressionFit = 3.41061e-13, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 3.41061e-13, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 3.41061e-13, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]' score=-2.1700003410605136E-6
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -0.000003 (regressionFit = 3.41061e-13, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 3.41061e-13, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -0.000003 (regressionFit = 3.41061e-13, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 3.41061e-13, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 3.41061e-13, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -0.000003 (regressionFit = 3.41061e-13, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 3.41061e-13, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -4.548.
% Will extend: value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
Comparing variance: 3.789561257387201E-14 to score=0.0025 #egs=3.0
Comparing variance: 3.2481953634747435E-14 to score=0.0025 #egs=7.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #6: 59 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #1 @ 18:59:36 9/6/17.  [Using 1,871,176 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, destination, A) )
%   then if ( tIn(C, source, A), bOn(D, C, A) )
%   | then if ( bOn(E, B, A) )
%   | | then return 21.19954311861551;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else return 21.45971691596;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( bOn(F, B, A) )
%   | | then return 11.0279762086;  // std dev = 3.37e-07, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 15.6816119306;  // std dev = 4.77e-07, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 45.914112877681006;  // std dev = 19.334, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */


% Clauses:

value(A, 21.19954311861551) :- 
     tIn(B, destination, A), 
     tIn(C, source, A), 
     bOn(D, C, A), 
     bOn(E, B, A), 
     !. // Clause #1.

value(A, 21.45971691596) :- 
     tIn(B, destination, A), 
     tIn(C, source, A), 
     bOn(D, C, A), 
     !. // Clause #2.

value(A, 11.0279762086) :- 
     tIn(B, destination, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, 15.6816119306) :- 
     tIn(B, destination, A), 
     !. // Clause #4.

value(A, 45.914112877681006) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, 21.19954311861551) :-  /* #pos=78 */ 
   tIn(uniqueVar1, destination, a),
   tIn(uniqueVar2, source, a),
   bOn(underscore, uniqueVar2, a),
   bOn(underscore, uniqueVar1, a),
   !. // Flattened version of clause #1.

flattened_value(a, 21.45971691596) :-  /* #pos=5 */ 
   tIn(underscore, destination, a),
   tIn(uniqueVar3, source, a),
   bOn(underscore, uniqueVar3, a),
   !. // Flattened version of clause #2.

flattened_value(a, 11.0279762086) :-  /* #pos=3 */ 
   tIn(uniqueVar4, destination, a),
   bOn(underscore, uniqueVar4, a),
   !. // Flattened version of clause #3.

flattened_value(a, 15.6816119306) :-  /* #pos=7 */ 
   tIn(underscore, destination, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, 45.914112877681006) :-  /* #pos=10 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   tIn(uniqueVar2, source, a)
%   tIn(uniqueVar1, destination, a)
%   tIn(uniqueVar3, source, a)
%   bOn(underscore, uniqueVar2, a)
%   bOn(underscore, uniqueVar3, a)
%   bOn(underscore, uniqueVar4, a)
%   tIn(uniqueVar4, destination, a)
%   bOn(underscore, uniqueVar1, a)
%   tIn(underscore, destination, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 1 trees is 3.797 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:4.547828340945699
Set score:0.0025
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:8 milliseconds
No hidden examples for : value
Time to build dataset: 15 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:449.8839530736193
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 10 positive seeds: 0 5 6 11 16 26 31 40 60 85
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,338.047168 (regressionFit = 46,338.047167, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,338.047168): value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,338.047168 (regressionFit = 46,338.047167, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46338.04716772278
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,338.047169 (regressionFit = 46,338.047167, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,338.047169 (regressionFit = 46,338.047167, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,338.047169 (regressionFit = 46,338.047167, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,304.280497 (regressionFit = 46,304.280495, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,304.280497): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46338.04716772278
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,338.047169 (regressionFit = 46,338.047167, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,338.047169 (regressionFit = 46,338.047167, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,338.047169 (regressionFit = 46,338.047167, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,338.047169 (regressionFit = 46,338.047167, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,338.047169 (regressionFit = 46,338.047167, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,338.047169 (regressionFit = 46,338.047167, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 507.19908840314514 to score=0.0025 #egs=91.0
Comparing variance: 12.430287554203067 to score=0.0025 #egs=12.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 91.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-507.199088)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -507.199088) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-12.430288)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -12.430288) into the LAST position (#2) in the search queue.

% Time for loop #1: 141 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 91 positive examples, of which 91 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]'
%     Score = -46,304.280497 (regressionFit = 46,304.280495, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Have these 9 positive seeds: 7 13 18 20 61 67 75 77 79
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,304.280497): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-46304.280497486645
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,131.513162 (regressionFit = 46,131.513158, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -507.199.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0025 #egs=83.0
Comparing variance: 439.30780476556475 to score=0.0025 #egs=8.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 8.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-439.307805)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -439.307805) into position #2 in the search queue (new size=3).

% Time for loop #2: 293 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 10 positive seeds: 0 3 7 10 12 13 38 48 57 60
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -513.251.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0025 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -545.477570) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 473 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 10 positive seeds: 2 23 30 31 33 47 48 52 53 59
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 4 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 3 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon5489, Anon4855, D))

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/8.0 pos, 0.0/0.0 neg]'
%     Score = -46,304.280497 (regressionFit = 46,304.280495, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

***** Warning: % Have only 8 positive examples, so cannot choose 10 of them. *****


% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,304.280497): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #5, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-46304.280497486645
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,304.2805):
%  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- tIn(Anon4855, destination, D))

% Have these 6 positive seeds: 2 3 4 5 8 11
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #6, bodyLen=0] 'value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -139.219222 (regressionFit = 139.219221, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -139.219222): value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]' score=-139.21922174707433
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -139.219223 (regressionFit = 139.219221, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -107.397687 (regressionFit = 107.397684, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -107.397687): value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
%     Score = -139.219223 (regressionFit = 139.219221, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -107.397687 (regressionFit = 107.397684, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -139.219223 (regressionFit = 139.219221, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -139.219223 (regressionFit = 139.219221, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -12.430.
% Will extend: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=7.0
Comparing variance: 21.479536893662896 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #6: 27 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 7 positive examples, of which 7 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #2 @ 18:59:38 9/6/17.  [Using 1,898,616 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, source, A), bOn(C, B, A) )
%   then if ( tIn(D, destination, A) )
%   | then if ( bOn(E, D, A) )
%   | | then return 2.1862853408003084E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -2.365085495154754;  // std dev = 20.960, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tIn(F, source, A), tIn(G, destination, A) )
%   | then return 0;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 3.7841367922475966;  // std dev = 10.363, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */


% Clauses:

value(A, 2.1862853408003084E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     bOn(E, D, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     !. // Clause #2.

value(A, -2.365085495154754) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, 0) :- 
     tIn(B, source, A), 
     tIn(C, destination, A), 
     !. // Clause #4.

value(A, 3.7841367922475966) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, 2.1862853408003084E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar5, source, a),
   bOn(underscore, uniqueVar5, a),
   tIn(uniqueVar6, destination, a),
   bOn(underscore, uniqueVar6, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(uniqueVar7, source, a),
   bOn(underscore, uniqueVar7, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #2.

flattened_value(a, -2.365085495154754) :-  /* #pos=8 */ 
   tIn(uniqueVar8, source, a),
   bOn(underscore, uniqueVar8, a),
   !. // Flattened version of clause #3.

flattened_value(a, 0) :-  /* #pos=7 */ 
   tIn(underscore, source, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, 3.7841367922475966) :-  /* #pos=5 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   tIn(uniqueVar5, source, a)
%   bOn(underscore, uniqueVar5, a)
%   bOn(underscore, uniqueVar6, a)
%   tIn(uniqueVar8, source, a)
%   tIn(uniqueVar6, destination, a)
%   bOn(underscore, uniqueVar8, a)
%   tIn(uniqueVar7, source, a)
%   bOn(underscore, uniqueVar7, a)
%   tIn(underscore, destination, a)
%   tIn(underscore, source, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 2 trees is 5.369 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:12.430287554203066
Set score:0.0025
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:10 milliseconds
No hidden examples for : value
Time to build dataset: 12 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:448.7543657774317
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 11 16 20 24 25 88 91
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,177.451830 (regressionFit = 46,177.451829, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,177.451830): value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,207.426178 (regressionFit = 46,207.426176, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46177.45183021451
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,177.451831 (regressionFit = 46,177.451829, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,221.699677 (regressionFit = 46,221.699675, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,177.451831 (regressionFit = 46,177.451829, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,221.699677 (regressionFit = 46,221.699675, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46207.426177505455
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,221.699677 (regressionFit = 46,221.699675, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,207.426179 (regressionFit = 46,207.426176, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,207.426179 (regressionFit = 46,207.426176, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,214.250545 (regressionFit = 46,214.250543, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,177.451831 (regressionFit = 46,177.451829, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,207.426179 (regressionFit = 46,207.426176, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 461.7745182907451 to score=0.0025 #egs=100.0
Comparing variance: 0.0 to score=0.0025 #egs=3.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 100.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-461.774518)
%         ILP node to extend: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -461.774518) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 3.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 83 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 100 positive examples, of which 100 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]'
%     Score = -46,177.451830 (regressionFit = 46,177.451829, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 6 9 11 12 14 20 59
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,177.451830): value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-46177.45183021451
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,165.852881 (regressionFit = 46,165.852879, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,165.852881): value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,164.420912 (regressionFit = 46,164.420910, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,164.420912): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]' score=-46164.420912175694
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,171.159591 (regressionFit = 46,171.159588, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,164.420913 (regressionFit = 46,164.420910, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,164.420913 (regressionFit = 46,164.420910, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]' score=-46165.85288132192
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -46,165.852882 (regressionFit = 46,165.852879, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,165.852882 (regressionFit = 46,165.852879, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,165.852882 (regressionFit = 46,165.852879, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), bIn(_, source, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,171.159591 (regressionFit = 46,171.159588, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,172.882549 (regressionFit = 46,172.882546, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, source, A), tIn(B, destination, A), bOn(_, B, A).  [covers 78.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,165.852882 (regressionFit = 46,165.852879, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,164.420913 (regressionFit = 46,164.420910, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,164.420913 (regressionFit = 46,164.420910, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,165.852882 (regressionFit = 46,165.852879, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,164.420913 (regressionFit = 46,164.420910, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -461.775.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
Comparing variance: 506.75057132535323 to score=0.0025 #egs=91.0
Comparing variance: 5.568768824282979 to score=0.0025 #egs=9.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 91.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-506.750571)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -506.750571) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 9.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-5.568769)
%         ILP node to extend: value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -5.568769) into the LAST position (#2) in the search queue.

% Time for loop #2: 179 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
% This clause covers 91 positive examples, of which 91 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]'
%     Score = -46,164.420912 (regressionFit = 46,164.420910, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 1 4 9 19 30 36 50 62
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,164.420912): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-46164.420912175694
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -506.751.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0025 #egs=83.0
Comparing variance: 439.3078047655648 to score=0.0025 #egs=8.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 8.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-439.307805)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -439.307805) into position #2 in the search queue (new size=3).

% Time for loop #3: 261 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 1 6 8 9 24 34 81
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 3 with score = -513.251.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0025 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -545.477570) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #4: 506 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 2 8 11 14 18 27 28 31
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #5, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon9335, Anon8701, D))

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/8.0 pos, 0.0/0.0 neg]'
%     Score = -46,164.420912 (regressionFit = 46,164.420910, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,164.420912): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-46164.420912175694
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,164.4209):
%  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- tIn(Anon8701, destination, D))

% Working on expanding this node: 'value(A) :- tIn(_, source, A).  [covers 100.0/9.0 pos, 0.0/0.0 neg]'
%     Score = -46,177.451830 (regressionFit = 46,177.451829, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,177.451830): value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #7, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-46177.45183021451
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #7, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #7, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), bIn(_, source, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #7, bodyLen=2] 'value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,177.4518):
%  value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon8227, Anon7961, D))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #3 @ 18:59:40 9/6/17.  [Using 1,927,824 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, source, A) )
%   then if ( bOn(C, B, A) )
%   | then if ( tIn(D, destination, A) )
%   | | then if ( bOn(E, D, A) )
%   | | | then return -5.101332461867386E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -1.7763568394002505E-15;  // std dev = 20.960, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 1.2613789307491996;  // std dev = 2.360, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -3.7841367922475957;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */


% Clauses:

value(A, -5.101332461867386E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     bOn(E, D, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     !. // Clause #2.

value(A, -1.7763568394002505E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, 1.2613789307491996) :- 
     tIn(B, source, A), 
     !. // Clause #4.

value(A, -3.7841367922475957) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, -5.101332461867386E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar9, source, a),
   bOn(underscore, uniqueVar9, a),
   tIn(uniqueVar10, destination, a),
   bOn(underscore, uniqueVar10, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(uniqueVar11, source, a),
   bOn(underscore, uniqueVar11, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #2.

flattened_value(a, -1.7763568394002505E-15) :-  /* #pos=8 */ 
   tIn(uniqueVar12, source, a),
   bOn(underscore, uniqueVar12, a),
   !. // Flattened version of clause #3.

flattened_value(a, 1.2613789307491996) :-  /* #pos=9 */ 
   tIn(underscore, source, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, -3.7841367922475957) :-  /* #pos=3 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   bOn(underscore, uniqueVar11, a)
%   tIn(uniqueVar12, source, a)
%   bOn(underscore, uniqueVar12, a)
%   tIn(uniqueVar10, destination, a)
%   bOn(underscore, uniqueVar9, a)
%   bOn(underscore, uniqueVar10, a)
%   tIn(uniqueVar9, source, a)
%   tIn(uniqueVar11, source, a)
%   tIn(underscore, destination, a)
%   tIn(underscore, source, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 3 trees is 7.212 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:5.568768824282979
Set score:0.0025
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:21 milliseconds
No hidden examples for : value
Time to build dataset: 23 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:448.1982612623853
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 7 positive seeds: 2 13 22 34 40 62 83
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,164.420911 (regressionFit = 46,164.420910, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,164.420911): value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,155.786326 (regressionFit = 46,155.786324, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,155.786326): value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46155.78632552629
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,157.557524 (regressionFit = 46,157.557521, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,155.786327 (regressionFit = 46,155.786324, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,155.786327 (regressionFit = 46,155.786324, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,164.420912 (regressionFit = 46,164.420910, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46164.42091116568
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,164.420912 (regressionFit = 46,164.420910, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,157.557524 (regressionFit = 46,157.557521, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,164.420912 (regressionFit = 46,164.420910, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,164.420912 (regressionFit = 46,164.420910, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,164.420912 (regressionFit = 46,164.420910, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,155.786327 (regressionFit = 46,155.786324, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 458.17353527791175 to score=0.0025 #egs=93.0
Comparing variance: 354.5647543540503 to score=0.0025 #egs=10.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 93.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-458.173535)
%         ILP node to extend: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -458.173535) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 10.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-354.564754)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -354.564754) into the LAST position (#2) in the search queue.

% Time for loop #1: 108 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 93 positive examples, of which 93 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]'
%     Score = -46,155.786326 (regressionFit = 46,155.786324, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 28 50 52 62 66 69 72 79
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,155.786326): value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-46155.78632552629
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,610.110839 (regressionFit = 42,610.110837, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,610.110839): value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,604.480195 (regressionFit = 42,604.480193, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,604.480195): value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]' score=-42604.48019531951
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -42,604.480196 (regressionFit = 42,604.480193, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,605.779576 (regressionFit = 42,605.779573, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,604.480196 (regressionFit = 42,604.480193, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,604.480196 (regressionFit = 42,604.480193, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]' score=-42610.11083937295
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -42,610.110840 (regressionFit = 42,610.110837, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,610.110840 (regressionFit = 42,610.110837, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,610.110840 (regressionFit = 42,610.110837, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,605.779576 (regressionFit = 42,605.779573, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,603.180817 (regressionFit = 42,603.180814, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,603.180817): value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,610.110840 (regressionFit = 42,610.110837, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,604.480196 (regressionFit = 42,604.480193, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,604.480196 (regressionFit = 42,604.480193, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,610.110840 (regressionFit = 42,610.110837, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,604.480196 (regressionFit = 42,604.480193, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -458.174.
% Will extend: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0025 #egs=83.0
Comparing variance: 0.33412612945697945 to score=0.0025 #egs=10.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 10.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0.334126)
%         ILP node to extend: value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0.334126) into the LAST position (#3) in the search queue.

% Time for loop #2: 171 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -42,603.180817 (regressionFit = 42,603.180814, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 12 15 18 20 22 34 39 42
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,603.180817): value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-42603.18081695718
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -513.251.
% Will extend: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0025 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -545.477570) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 482 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 3 13 20 24 29 42 73
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon12911, Anon12113, D))

% Have these 8 positive seeds: 1 2 3 4 5 7 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null
Created a leaf under (value(D) :- tIn(Anon12113, destination, D))

% Working on expanding this node: 'value(A) :- tIn(_, destination, A).  [covers 93.0/10.0 pos, 0.0/0.0 neg]'
%     Score = -46,155.786326 (regressionFit = 46,155.786324, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,155.786326): value(A) :- tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-46155.78632552629
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -0.000002 (regressionFit = 0.000000, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000002): value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = 0.000000, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000002): value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]' score=-2.1500000000000006E-6
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]' score=-2.1700000000000004E-6
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -0.334.
% Will extend: value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=3.0
Comparing variance: 0.0 to score=0.0025 #egs=7.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #6: 34 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #4 @ 18:59:41 9/6/17.  [Using 1,953,752 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, destination, A) )
%   then if ( tIn(C, source, A), bOn(D, C, A) )
%   | then if ( bOn(E, B, A) )
%   | | then return 2.1862853408003084E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( bOn(F, B, A) )
%   | | then return 0;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -1.261378930749201;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.882965251524437;  // std dev = 18.830, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */


% Clauses:

value(A, 2.1862853408003084E-15) :- 
     tIn(B, destination, A), 
     tIn(C, source, A), 
     bOn(D, C, A), 
     bOn(E, B, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, destination, A), 
     tIn(C, source, A), 
     bOn(D, C, A), 
     !. // Clause #2.

value(A, 0) :- 
     tIn(B, destination, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, -1.261378930749201) :- 
     tIn(B, destination, A), 
     !. // Clause #4.

value(A, 0.882965251524437) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, 2.1862853408003084E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar13, destination, a),
   tIn(uniqueVar14, source, a),
   bOn(underscore, uniqueVar14, a),
   bOn(underscore, uniqueVar13, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(underscore, destination, a),
   tIn(uniqueVar15, source, a),
   bOn(underscore, uniqueVar15, a),
   !. // Flattened version of clause #2.

flattened_value(a, 0) :-  /* #pos=3 */ 
   tIn(uniqueVar16, destination, a),
   bOn(underscore, uniqueVar16, a),
   !. // Flattened version of clause #3.

flattened_value(a, -1.261378930749201) :-  /* #pos=7 */ 
   tIn(underscore, destination, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, 0.882965251524437) :-  /* #pos=10 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   tIn(uniqueVar14, source, a)
%   bOn(underscore, uniqueVar16, a)
%   tIn(uniqueVar15, source, a)
%   tIn(uniqueVar16, destination, a)
%   bOn(underscore, uniqueVar13, a)
%   tIn(uniqueVar13, destination, a)
%   bOn(underscore, uniqueVar15, a)
%   bOn(underscore, uniqueVar14, a)
%   tIn(underscore, destination, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 4 trees is 8.661 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.3341261294569794
Set score:0.0025
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:13 milliseconds
No hidden examples for : value
Time to build dataset: 14 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:448.01443782546727
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 20 23 31 66 68 79 83 86
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,145.487097 (regressionFit = 46,145.487096, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,145.487097): value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,145.487097 (regressionFit = 46,145.487096, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46145.48709716311
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,145.487098 (regressionFit = 46,145.487096, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,145.487098 (regressionFit = 46,145.487096, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,145.487098 (regressionFit = 46,145.487096, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,145.487098 (regressionFit = 46,145.487096, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46145.487097163124
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,145.487098 (regressionFit = 46,145.487096, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,145.487098 (regressionFit = 46,145.487096, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,145.487098 (regressionFit = 46,145.487096, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,140.780775 (regressionFit = 46,140.780772, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,140.780775): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,145.487098 (regressionFit = 46,145.487096, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,145.487098 (regressionFit = 46,145.487096, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 506.81308463895124 to score=0.0025 #egs=91.0
Comparing variance: 1.7325058564435907 to score=0.0025 #egs=12.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 91.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-506.813085)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -506.813085) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-1.732506)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -1.732506) into the LAST position (#2) in the search queue.

% Time for loop #1: 74 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 91 positive examples, of which 91 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]'
%     Score = -46,140.780775 (regressionFit = 46,140.780772, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 5 26 27 50 60 74 80 81
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,140.780775): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-46140.78077457189
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,116.700849 (regressionFit = 46,116.700845, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -506.813.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0025 #egs=83.0
Comparing variance: 439.3078047655648 to score=0.0025 #egs=8.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 8.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-439.307805)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -439.307805) into position #2 in the search queue (new size=3).

% Time for loop #2: 258 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 8 19 33 52 54 56 71 76
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -513.251.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0025 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -545.477570) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 447 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 6 positive seeds: 14 20 49 52 60 70
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon16521, Anon15887, D))

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/8.0 pos, 0.0/0.0 neg]'
%     Score = -46,140.780775 (regressionFit = 46,140.780772, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,140.780775): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #5, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-46140.78077457189
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,140.7808):
%  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- tIn(Anon15887, destination, D))

% Have these 8 positive seeds: 0 1 2 4 5 6 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #6, bodyLen=0] 'value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -19.404067 (regressionFit = 19.404066, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -19.404067): value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]' score=-19.404066732168214
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -19.404068 (regressionFit = 19.404066, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -14.968853 (regressionFit = 14.968851, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -14.968853): value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
%     Score = -19.404068 (regressionFit = 19.404066, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -14.968853 (regressionFit = 14.968851, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -19.404068 (regressionFit = 19.404066, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -19.404068 (regressionFit = 19.404066, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -1.733.
% Will extend: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=7.0
Comparing variance: 2.993770119934525 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #6: 26 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 7 positive examples, of which 7 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #5 @ 18:59:43 9/6/17.  [Using 1,964,816 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, source, A), bOn(C, B, A) )
%   then if ( tIn(D, destination, A) )
%   | then if ( bOn(E, D, A) )
%   | | then return -5.101332461867386E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.8829652515244408;  // std dev = 20.960, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tIn(F, source, A), tIn(G, destination, A) )
%   | then return 0;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 1.4127444024391025;  // std dev = 3.869, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */


% Clauses:

value(A, -5.101332461867386E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     bOn(E, D, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     !. // Clause #2.

value(A, -0.8829652515244408) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, 0) :- 
     tIn(B, source, A), 
     tIn(C, destination, A), 
     !. // Clause #4.

value(A, 1.4127444024391025) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, -5.101332461867386E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar17, source, a),
   bOn(underscore, uniqueVar17, a),
   tIn(uniqueVar18, destination, a),
   bOn(underscore, uniqueVar18, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(uniqueVar19, source, a),
   bOn(underscore, uniqueVar19, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #2.

flattened_value(a, -0.8829652515244408) :-  /* #pos=8 */ 
   tIn(uniqueVar20, source, a),
   bOn(underscore, uniqueVar20, a),
   !. // Flattened version of clause #3.

flattened_value(a, 0) :-  /* #pos=7 */ 
   tIn(underscore, source, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, 1.4127444024391025) :-  /* #pos=5 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   tIn(uniqueVar17, source, a)
%   bOn(underscore, uniqueVar17, a)
%   tIn(uniqueVar18, destination, a)
%   tIn(uniqueVar19, source, a)
%   bOn(underscore, uniqueVar19, a)
%   bOn(underscore, uniqueVar18, a)
%   tIn(uniqueVar20, source, a)
%   tIn(underscore, destination, a)
%   bOn(underscore, uniqueVar20, a)
%   tIn(underscore, source, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 5 trees is 10.126 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:1.732505856443591
Set score:0.0025
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:19 milliseconds
No hidden examples for : value
Time to build dataset: 21 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:447.8569984583185
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 6 positive seeds: 5 50 57 58 60 74
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,123.103676 (regressionFit = 46,123.103675, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,123.103676): value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,127.281434 (regressionFit = 46,127.281433, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46123.10367589974
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,123.103677 (regressionFit = 46,123.103675, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,129.270843 (regressionFit = 46,129.270841, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,123.103677 (regressionFit = 46,123.103675, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,129.270843 (regressionFit = 46,129.270841, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46127.28143381548
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,129.270843 (regressionFit = 46,129.270841, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,127.281435 (regressionFit = 46,127.281433, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,127.281435 (regressionFit = 46,127.281433, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,128.232600 (regressionFit = 46,128.232598, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,123.103677 (regressionFit = 46,123.103675, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,127.281435 (regressionFit = 46,127.281433, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 461.23103674759744 to score=0.0025 #egs=100.0
Comparing variance: -2.9605947323337506E-16 to score=0.0025 #egs=3.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 100.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-461.231037)
%         ILP node to extend: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -461.231037) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 3.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 71 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 100 positive examples, of which 100 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]'
%     Score = -46,123.103676 (regressionFit = 46,123.103675, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 3 10 12 23 28 35 37 40
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,123.103676): value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-46123.10367589974
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,121.487041 (regressionFit = 46,121.487039, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,121.487041): value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,121.287456 (regressionFit = 46,121.287454, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,121.287456): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]' score=-46121.28745637032
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,121.287457 (regressionFit = 46,121.287454, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,122.226679 (regressionFit = 46,122.226676, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,121.287457 (regressionFit = 46,121.287454, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,121.287457 (regressionFit = 46,121.287454, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]' score=-46121.487041064975
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -46,121.487042 (regressionFit = 46,121.487039, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,121.487042 (regressionFit = 46,121.487039, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,121.487042 (regressionFit = 46,121.487039, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), bIn(_, source, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,122.226679 (regressionFit = 46,122.226676, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,122.466821 (regressionFit = 46,122.466818, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, source, A), tIn(B, destination, A), bOn(_, B, A).  [covers 78.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,121.487042 (regressionFit = 46,121.487039, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,121.287457 (regressionFit = 46,121.287454, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,121.287457 (regressionFit = 46,121.287454, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,121.487042 (regressionFit = 46,121.487039, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,121.287457 (regressionFit = 46,121.287454, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -461.231.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
Comparing variance: 506.75057132535323 to score=0.0025 #egs=91.0
Comparing variance: 0.7761626236867287 to score=0.0025 #egs=9.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 91.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-506.750571)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -506.750571) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 9.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0.776163)
%         ILP node to extend: value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0.776163) into the LAST position (#2) in the search queue.

% Time for loop #2: 170 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
% This clause covers 91 positive examples, of which 91 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]'
%     Score = -46,121.287456 (regressionFit = 46,121.287454, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 13 14 16 17 29 40 44 65
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,121.287456): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-46121.28745637032
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -506.751.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0025 #egs=83.0
Comparing variance: 439.3078047655648 to score=0.0025 #egs=8.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 8.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-439.307805)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -439.307805) into position #2 in the search queue (new size=3).

% Time for loop #3: 262 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 4 17 18 19 20 24 30 45
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 3 with score = -513.251.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0025 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -545.477570) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #4: 398 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 6 positive seeds: 6 34 47 48 58 63
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #5, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 4 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 3 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon20687, Anon20053, D))

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/8.0 pos, 0.0/0.0 neg]'
%     Score = -46,121.287456 (regressionFit = 46,121.287454, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,121.287456): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-46121.28745637032
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,121.2875):
%  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- tIn(Anon20053, destination, D))

% Working on expanding this node: 'value(A) :- tIn(_, source, A).  [covers 100.0/9.0 pos, 0.0/0.0 neg]'
%     Score = -46,123.103676 (regressionFit = 46,123.103675, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 6 7 8
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,123.103676): value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #7, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-46123.10367589974
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #7, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #7, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), bIn(_, source, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #7, bodyLen=2] 'value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,123.1037):
%  value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon19563, Anon19297, D))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #6 @ 18:59:44 9/6/17.  [Using 1,972,000 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, source, A) )
%   then if ( bOn(C, B, A) )
%   | then if ( tIn(D, destination, A) )
%   | | then if ( bOn(E, D, A) )
%   | | | then return 2.1862853408003084E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -1.7763568394002505E-15;  // std dev = 20.960, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.47091480081303416;  // std dev = 0.881, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -1.4127444024391025;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */


% Clauses:

value(A, 2.1862853408003084E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     bOn(E, D, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     !. // Clause #2.

value(A, -1.7763568394002505E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, 0.47091480081303416) :- 
     tIn(B, source, A), 
     !. // Clause #4.

value(A, -1.4127444024391025) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, 2.1862853408003084E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar21, source, a),
   bOn(underscore, uniqueVar21, a),
   tIn(uniqueVar22, destination, a),
   bOn(underscore, uniqueVar22, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(uniqueVar23, source, a),
   bOn(underscore, uniqueVar23, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #2.

flattened_value(a, -1.7763568394002505E-15) :-  /* #pos=8 */ 
   tIn(uniqueVar24, source, a),
   bOn(underscore, uniqueVar24, a),
   !. // Flattened version of clause #3.

flattened_value(a, 0.47091480081303416) :-  /* #pos=9 */ 
   tIn(underscore, source, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, -1.4127444024391025) :-  /* #pos=3 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   tIn(uniqueVar21, source, a)
%   bOn(underscore, uniqueVar21, a)
%   tIn(uniqueVar22, destination, a)
%   tIn(uniqueVar24, source, a)
%   bOn(underscore, uniqueVar22, a)
%   tIn(uniqueVar23, source, a)
%   bOn(underscore, uniqueVar23, a)
%   bOn(underscore, uniqueVar24, a)
%   tIn(underscore, destination, a)
%   tIn(underscore, source, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 6 trees is 11.599 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.7761626236867288
Set score:0.0025
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:20 milliseconds
No hidden examples for : value
Time to build dataset: 22 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:447.7794898467992
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 2 16 45 56 64 67 85 100
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,121.287455 (regressionFit = 46,121.287454, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,121.287455): value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,120.083986 (regressionFit = 46,120.083985, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,120.083986): value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46120.08398600186
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,120.330853 (regressionFit = 46,120.330850, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,120.083987 (regressionFit = 46,120.083985, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,121.287456 (regressionFit = 46,121.287454, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46121.28745536032
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,121.287456 (regressionFit = 46,121.287454, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,120.330853 (regressionFit = 46,120.330850, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,121.287456 (regressionFit = 46,121.287454, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,121.287456 (regressionFit = 46,121.287454, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,121.287456 (regressionFit = 46,121.287454, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,120.083987 (regressionFit = 46,120.083985, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 458.07822619402896 to score=0.0025 #egs=93.0
Comparing variance: 351.8808948817165 to score=0.0025 #egs=10.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 93.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-458.078226)
%         ILP node to extend: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -458.078226) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 10.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-351.880895)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -351.880895) into the LAST position (#2) in the search queue.

% Time for loop #1: 92 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 93 positive examples, of which 93 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]'
%     Score = -46,120.083986 (regressionFit = 46,120.083985, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 4 7 20 34 35 44 45 53
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,120.083986): value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-46120.08398600186
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -42,601.271143 (regressionFit = 42,601.271141, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,601.271143): value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,600.486357 (regressionFit = 42,600.486355, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,600.486357): value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]' score=-42600.48635681901
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -42,600.667462 (regressionFit = 42,600.667459, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,600.486358 (regressionFit = 42,600.486355, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,600.486358 (regressionFit = 42,600.486355, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]' score=-42601.27114349186
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -42,601.271145 (regressionFit = 42,601.271141, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,601.271145 (regressionFit = 42,601.271141, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,600.667462 (regressionFit = 42,600.667459, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,600.305253 (regressionFit = 42,600.305250, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,600.305253): value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -42,601.271145 (regressionFit = 42,601.271141, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,600.486358 (regressionFit = 42,600.486355, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -458.078.
% Will extend: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0025 #egs=83.0
Comparing variance: 0.046569757421203374 to score=0.0025 #egs=10.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 10.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0.046570)
%         ILP node to extend: value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0.046570) into the LAST position (#3) in the search queue.

% Time for loop #2: 111 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -42,600.305253 (regressionFit = 42,600.305250, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 12 31 33 37 40 42 46 82
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,600.305253): value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-42600.305253236824
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -513.251.
% Will extend: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0025 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -545.477570) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 450 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 3 19 27 41 53 56 71 77
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon23789, Anon23161, D))

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null
Created a leaf under (value(D) :- tIn(Anon23161, destination, D))

% Working on expanding this node: 'value(A) :- tIn(_, destination, A).  [covers 93.0/10.0 pos, 0.0/0.0 neg]'
%     Score = -46,120.083986 (regressionFit = 46,120.083985, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,120.083986): value(A) :- tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-46120.08398600186
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -0.000002 (regressionFit = 0.000000, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000002): value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = 0.000000, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000002): value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]' score=-2.1500000000000006E-6
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]' score=-2.1700000000000004E-6
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 0.000000, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -0.047.
% Will extend: value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=3.0
Comparing variance: 0.0 to score=0.0025 #egs=7.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #6: 35 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #7 @ 18:59:46 9/6/17.  [Using 1,988,088 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, destination, A) )
%   then if ( tIn(C, source, A), bOn(D, C, A) )
%   | then if ( bOn(E, B, A) )
%   | | then return -5.101332461867386E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( bOn(F, B, A) )
%   | | then return 0;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.4709148008130324;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.3296403605691225;  // std dev = 18.758, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */


% Clauses:

value(A, -5.101332461867386E-15) :- 
     tIn(B, destination, A), 
     tIn(C, source, A), 
     bOn(D, C, A), 
     bOn(E, B, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, destination, A), 
     tIn(C, source, A), 
     bOn(D, C, A), 
     !. // Clause #2.

value(A, 0) :- 
     tIn(B, destination, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, -0.4709148008130324) :- 
     tIn(B, destination, A), 
     !. // Clause #4.

value(A, 0.3296403605691225) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, -5.101332461867386E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar25, destination, a),
   tIn(uniqueVar26, source, a),
   bOn(underscore, uniqueVar26, a),
   bOn(underscore, uniqueVar25, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(underscore, destination, a),
   tIn(uniqueVar27, source, a),
   bOn(underscore, uniqueVar27, a),
   !. // Flattened version of clause #2.

flattened_value(a, 0) :-  /* #pos=3 */ 
   tIn(uniqueVar28, destination, a),
   bOn(underscore, uniqueVar28, a),
   !. // Flattened version of clause #3.

flattened_value(a, -0.4709148008130324) :-  /* #pos=7 */ 
   tIn(underscore, destination, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, 0.3296403605691225) :-  /* #pos=10 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   tIn(uniqueVar26, source, a)
%   tIn(uniqueVar27, source, a)
%   bOn(underscore, uniqueVar28, a)
%   tIn(uniqueVar28, destination, a)
%   bOn(underscore, uniqueVar26, a)
%   bOn(underscore, uniqueVar25, a)
%   tIn(uniqueVar25, destination, a)
%   tIn(underscore, destination, a)
%   bOn(underscore, uniqueVar27, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 7 trees is 13.003 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.04656975742120337
Set score:0.0025
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:29 milliseconds
No hidden examples for : value
Time to build dataset: 30 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:447.753868944658
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 1 4 6 31 33 45 51 72
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,118.648502 (regressionFit = 46,118.648501, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,118.648502): value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,118.648502 (regressionFit = 46,118.648501, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46118.64850243977
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,118.648503 (regressionFit = 46,118.648501, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,118.648503 (regressionFit = 46,118.648501, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,118.648504 (regressionFit = 46,118.648501, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,117.992547 (regressionFit = 46,117.992544, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,117.992547): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46118.64850243977
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,118.648503 (regressionFit = 46,118.648501, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,118.648503 (regressionFit = 46,118.648501, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,118.648504 (regressionFit = 46,118.648501, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,118.648503 (regressionFit = 46,118.648501, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,118.648504 (regressionFit = 46,118.648501, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,118.648504 (regressionFit = 46,118.648501, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 506.759284292084 to score=0.0025 #egs=91.0
Comparing variance: 0.24147281625809391 to score=0.0025 #egs=12.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 91.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-506.759284)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -506.759284) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.241473)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0.241473) into the LAST position (#2) in the search queue.

% Time for loop #1: 95 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 91 positive examples, of which 91 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]'
%     Score = -46,117.992547 (regressionFit = 46,117.992544, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Have these 3 positive seeds: 3 30 89
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,117.992547): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-46117.992546524736
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.636342 (regressionFit = 46,114.636338, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -506.759.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0025 #egs=83.0
Comparing variance: 439.30780476556487 to score=0.0025 #egs=8.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 8.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-439.307805)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -439.307805) into position #2 in the search queue (new size=3).

% Time for loop #2: 352 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 4 13 18 28 33 40 41 53
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -513.251.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0025 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -545.477570) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 429 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 6 10 13 25 41 43 55
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon27399, Anon26765, D))

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/8.0 pos, 0.0/0.0 neg]'
%     Score = -46,117.992547 (regressionFit = 46,117.992544, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,117.992547): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #5, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-46117.992546524736
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,117.9925):
%  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- tIn(Anon26765, destination, D))

% Have these 8 positive seeds: 0 1 3 4 6 8 10 11
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #6, bodyLen=0] 'value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -2.704497 (regressionFit = 2.704496, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.704497): value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]' score=-2.704496682090652
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -2.704498 (regressionFit = 2.704496, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.086327 (regressionFit = 2.086325, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -2.086327): value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.704498 (regressionFit = 2.704496, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -2.086327 (regressionFit = 2.086325, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -2.704498 (regressionFit = 2.704496, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -2.704498 (regressionFit = 2.704496, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.241.
% Will extend: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=7.0
Comparing variance: 0.4172650264939863 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0025
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #6: 20 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 7 positive examples, of which 7 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #8 @ 18:59:47 9/6/17.  [Using 1,998,608 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, source, A), bOn(C, B, A) )
%   then if ( tIn(D, destination, A) )
%   | then if ( bOn(E, D, A) )
%   | | then return 2.1862853408003084E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.32964036056912516;  // std dev = 20.960, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tIn(F, source, A), tIn(G, destination, A) )
%   | then return 0;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5274245769105989;  // std dev = 1.444, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */


% Clauses:

value(A, 2.1862853408003084E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     bOn(E, D, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     !. // Clause #2.

value(A, -0.32964036056912516) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, 0) :- 
     tIn(B, source, A), 
     tIn(C, destination, A), 
     !. // Clause #4.

value(A, 0.5274245769105989) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, 2.1862853408003084E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar29, source, a),
   bOn(underscore, uniqueVar29, a),
   tIn(uniqueVar30, destination, a),
   bOn(underscore, uniqueVar30, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(uniqueVar31, source, a),
   bOn(underscore, uniqueVar31, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #2.

flattened_value(a, -0.32964036056912516) :-  /* #pos=8 */ 
   tIn(uniqueVar32, source, a),
   bOn(underscore, uniqueVar32, a),
   !. // Flattened version of clause #3.

flattened_value(a, 0) :-  /* #pos=7 */ 
   tIn(underscore, source, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, 0.5274245769105989) :-  /* #pos=5 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   tIn(uniqueVar30, destination, a)
%   bOn(underscore, uniqueVar31, a)
%   tIn(uniqueVar32, source, a)
%   bOn(underscore, uniqueVar30, a)
%   bOn(underscore, uniqueVar32, a)
%   tIn(uniqueVar29, source, a)
%   bOn(underscore, uniqueVar29, a)
%   tIn(uniqueVar31, source, a)
%   tIn(underscore, destination, a)
%   tIn(underscore, source, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 8 trees is 14.833 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.24147281625809391
Set score:0.0025
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:39 milliseconds
No hidden examples for : value
Time to build dataset: 39 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:447.7319253955302
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 6 positive seeds: 1 38 70 80 85 93
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,115.528751 (regressionFit = 46,115.528750, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,115.528751): value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,116.111038 (regressionFit = 46,116.111036, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46115.528750925034
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,115.528752 (regressionFit = 46,115.528750, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,116.388318 (regressionFit = 46,116.388316, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,115.528752 (regressionFit = 46,115.528750, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,116.388318 (regressionFit = 46,116.388316, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46116.111037539406
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,116.388318 (regressionFit = 46,116.388316, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,116.111039 (regressionFit = 46,116.111036, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,116.111039 (regressionFit = 46,116.111036, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,116.243610 (regressionFit = 46,116.243608, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,115.528752 (regressionFit = 46,115.528750, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,116.111039 (regressionFit = 46,116.111036, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 461.1552874978504 to score=0.0025 #egs=100.0
Comparing variance: 3.700743415417188E-17 to score=0.0025 #egs=3.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 100.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-461.155287)
%         ILP node to extend: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -461.155287) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 3.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 82 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 100 positive examples, of which 100 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]'
%     Score = -46,115.528751 (regressionFit = 46,115.528750, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]

% Have these 6 positive seeds: 0 6 22 26 32 59
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,115.528751): value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-46115.528750925034
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.303429 (regressionFit = 46,115.303427, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,115.303429): value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.275611 (regressionFit = 46,115.275609, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,115.275611): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]' score=-46115.2756111523
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,115.275612 (regressionFit = 46,115.275609, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.406519 (regressionFit = 46,115.406516, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.275612 (regressionFit = 46,115.275609, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.275612 (regressionFit = 46,115.275609, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]' score=-46115.30342884072
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -46,115.303430 (regressionFit = 46,115.303427, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.303430 (regressionFit = 46,115.303427, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.303430 (regressionFit = 46,115.303427, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), bIn(_, source, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.406519 (regressionFit = 46,115.406516, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.439989 (regressionFit = 46,115.439986, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, source, A), tIn(B, destination, A), bOn(_, B, A).  [covers 78.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.303430 (regressionFit = 46,115.303427, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.275612 (regressionFit = 46,115.275609, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.275612 (regressionFit = 46,115.275609, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.303430 (regressionFit = 46,115.303427, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,115.275612 (regressionFit = 46,115.275609, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -461.155.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
Comparing variance: 506.75057132535323 to score=0.0025 #egs=91.0
Comparing variance: 0.10817982168362644 to score=0.0025 #egs=9.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 91.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-506.750571)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -506.750571) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 9.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0.108180)
%         ILP node to extend: value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0.108180) into the LAST position (#2) in the search queue.

% Time for loop #2: 183 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
% This clause covers 91 positive examples, of which 91 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]'
%     Score = -46,115.275611 (regressionFit = 46,115.275609, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 3 19 21 37 56 65 76 88
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,115.275611): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-46115.2756111523
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -506.751.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0025 #egs=83.0
Comparing variance: 439.3078047655648 to score=0.0025 #egs=8.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 8.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-439.307805)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -439.307805) into position #2 in the search queue (new size=3).

% Time for loop #3: 344 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 6 8 11 13 15 17 18 61
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 3 with score = -513.251.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0025 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -545.477570) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #4: 424 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 2 3 9 10 12 16 36 41
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #5, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon31565, Anon30931, D))

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/8.0 pos, 0.0/0.0 neg]'
%     Score = -46,115.275611 (regressionFit = 46,115.275609, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,115.275611): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-46115.2756111523
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,115.2756):
%  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- tIn(Anon30931, destination, D))

% Working on expanding this node: 'value(A) :- tIn(_, source, A).  [covers 100.0/9.0 pos, 0.0/0.0 neg]'
%     Score = -46,115.528751 (regressionFit = 46,115.528750, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,115.528751): value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #7, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-46115.528750925034
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #7, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #7, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), bIn(_, source, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #7, bodyLen=2] 'value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,115.5288):
%  value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon30441, Anon30175, D))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #9 @ 18:59:49 9/6/17.  [Using 2,003,488 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, source, A) )
%   then if ( bOn(C, B, A) )
%   | then if ( tIn(D, destination, A) )
%   | | then if ( bOn(E, D, A) )
%   | | | then return -5.101332461867386E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -1.7763568394002505E-15;  // std dev = 20.960, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.17580819230353326;  // std dev = 0.329, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.5274245769105992;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */


% Clauses:

value(A, -5.101332461867386E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     bOn(E, D, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     !. // Clause #2.

value(A, -1.7763568394002505E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, 0.17580819230353326) :- 
     tIn(B, source, A), 
     !. // Clause #4.

value(A, -0.5274245769105992) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, -5.101332461867386E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar33, source, a),
   bOn(underscore, uniqueVar33, a),
   tIn(uniqueVar34, destination, a),
   bOn(underscore, uniqueVar34, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(uniqueVar35, source, a),
   bOn(underscore, uniqueVar35, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #2.

flattened_value(a, -1.7763568394002505E-15) :-  /* #pos=8 */ 
   tIn(uniqueVar36, source, a),
   bOn(underscore, uniqueVar36, a),
   !. // Flattened version of clause #3.

flattened_value(a, 0.17580819230353326) :-  /* #pos=9 */ 
   tIn(underscore, source, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, -0.5274245769105992) :-  /* #pos=3 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   tIn(uniqueVar36, source, a)
%   tIn(uniqueVar35, source, a)
%   bOn(underscore, uniqueVar33, a)
%   tIn(uniqueVar34, destination, a)
%   bOn(underscore, uniqueVar35, a)
%   tIn(uniqueVar33, source, a)
%   bOn(underscore, uniqueVar36, a)
%   bOn(underscore, uniqueVar34, a)
%   tIn(underscore, destination, a)
%   tIn(underscore, source, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 9 trees is 16.585 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.10817982168362647
Set score:0.0025
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:35 milliseconds
No hidden examples for : value
Time to build dataset: 35 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:447.721122417498
Set score:0.0025
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 6 positive seeds: 11 14 59 70 75 98
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,115.275610 (regressionFit = 46,115.275609, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,115.275610): value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,115.107873 (regressionFit = 46,115.107872, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,115.107873): value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46115.107873257475
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,115.142282 (regressionFit = 46,115.142280, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,115.107874 (regressionFit = 46,115.107872, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,115.107874 (regressionFit = 46,115.107872, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,115.275611 (regressionFit = 46,115.275609, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46115.27561014229
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,115.275611 (regressionFit = 46,115.275609, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,115.142282 (regressionFit = 46,115.142280, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,115.275611 (regressionFit = 46,115.275609, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,115.275611 (regressionFit = 46,115.275609, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,115.275611 (regressionFit = 46,115.275609, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,115.107874 (regressionFit = 46,115.107872, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 458.06494222571536 to score=0.0025 #egs=93.0
Comparing variance: 351.50682451259473 to score=0.0025 #egs=10.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 93.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-458.064942)
%         ILP node to extend: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -458.064942) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 10.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-351.506825)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -351.506825) into the LAST position (#2) in the search queue.

% Time for loop #1: 75 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 93 positive examples, of which 93 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]'
%     Score = -46,115.107873 (regressionFit = 46,115.107872, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]

% Have these 5 positive seeds: 17 31 43 69 71
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,115.107873): value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-46115.107873257475
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,600.039086 (regressionFit = 42,600.039084, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,600.039086): value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.929704 (regressionFit = 42,599.929702, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.929704): value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]' score=-42599.92970448401
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -42,599.929705 (regressionFit = 42,599.929702, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.954947 (regressionFit = 42,599.954944, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.929706 (regressionFit = 42,599.929702, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]' score=-42600.03908632372
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -42,600.039087 (regressionFit = 42,600.039084, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,600.039087 (regressionFit = 42,600.039084, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,600.039087 (regressionFit = 42,600.039084, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.954947 (regressionFit = 42,599.954944, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.904464 (regressionFit = 42,599.904460, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.904464): value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,600.039087 (regressionFit = 42,600.039084, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.929705 (regressionFit = 42,599.929702, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.929705 (regressionFit = 42,599.929702, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,600.039087 (regressionFit = 42,600.039084, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.929706 (regressionFit = 42,599.929702, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -458.065.
% Will extend: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0025 #egs=83.0
Comparing variance: 0.006490789301017574 to score=0.0025 #egs=10.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 10.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0.006491)
%         ILP node to extend: value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0.006491) into the LAST position (#3) in the search queue.

% Time for loop #2: 147 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.904464 (regressionFit = 42,599.904460, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 16 21 24 54 59 68 70 80
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.904464): value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-42599.90446355562
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -513.251.
% Will extend: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0025 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0025 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -545.477570) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 441 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 8 20 21 36 50 58 66 72
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon35125, Anon34343, D))

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null
Created a leaf under (value(D) :- tIn(Anon34343, destination, D))

% Working on expanding this node: 'value(A) :- tIn(_, destination, A).  [covers 93.0/10.0 pos, 0.0/0.0 neg]'
%     Score = -46,115.107873 (regressionFit = 46,115.107872, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 4 5 6 7 8
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,115.107873): value(A) :- tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-46115.107873257475
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -0.000002 (regressionFit = 2.77556e-17, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000002): value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000002 (regressionFit = 2.77556e-17, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.000002): value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]' score=-2.150000000027756E-6
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -0.000003 (regressionFit = 2.77556e-17, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 2.77556e-17, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 2.77556e-17, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]' score=-2.170000000027756E-6
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -0.000003 (regressionFit = 2.77556e-17, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 2.77556e-17, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -0.000003 (regressionFit = 2.77556e-17, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 2.77556e-17, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 2.77556e-17, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -0.000003 (regressionFit = 2.77556e-17, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 7.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -0.000003 (regressionFit = 2.77556e-17, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -0.006.
% Will extend: value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0025 #egs=3.0
Comparing variance: 3.96508223080413E-18 to score=0.0025 #egs=7.0
%   Creating a TRUE-branch leaf because wgtedCountTrueBranchPos = 3.0 < 2.1 * minPosCov = 6.3
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0025

% Time for loop #6: 36 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/10.0 pos, 0.0/0.0 neg]
% This clause covers 3 positive examples, of which 3 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #10 @ 18:59:51 9/6/17.  [Using 2,025,688 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, destination, A) )
%   then if ( tIn(C, source, A), bOn(D, C, A) )
%   | then if ( bOn(E, B, A) )
%   | | then return 2.1862853408003084E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( bOn(F, B, A) )
%   | | then return 0;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.17580819230353306;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.12306573461247154;  // std dev = 18.749, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */


% Clauses:

value(A, 2.1862853408003084E-15) :- 
     tIn(B, destination, A), 
     tIn(C, source, A), 
     bOn(D, C, A), 
     bOn(E, B, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, destination, A), 
     tIn(C, source, A), 
     bOn(D, C, A), 
     !. // Clause #2.

value(A, 0) :- 
     tIn(B, destination, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, -0.17580819230353306) :- 
     tIn(B, destination, A), 
     !. // Clause #4.

value(A, 0.12306573461247154) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, 2.1862853408003084E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar37, destination, a),
   tIn(uniqueVar38, source, a),
   bOn(underscore, uniqueVar38, a),
   bOn(underscore, uniqueVar37, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(underscore, destination, a),
   tIn(uniqueVar39, source, a),
   bOn(underscore, uniqueVar39, a),
   !. // Flattened version of clause #2.

flattened_value(a, 0) :-  /* #pos=3 */ 
   tIn(uniqueVar40, destination, a),
   bOn(underscore, uniqueVar40, a),
   !. // Flattened version of clause #3.

flattened_value(a, -0.17580819230353306) :-  /* #pos=7 */ 
   tIn(underscore, destination, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, 0.12306573461247154) :-  /* #pos=10 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   tIn(uniqueVar39, source, a)
%   tIn(uniqueVar38, source, a)
%   bOn(underscore, uniqueVar37, a)
%   tIn(uniqueVar40, destination, a)
%   bOn(underscore, uniqueVar38, a)
%   bOn(underscore, uniqueVar40, a)
%   bOn(underscore, uniqueVar39, a)
%   tIn(uniqueVar37, destination, a)
%   tIn(underscore, destination, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Saving model in: train/models/bRDNs/value.model
% Time taken to learn 10 trees is 17.963 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.0064907893010175775
Set score:0.0016226973252543944
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:50 milliseconds
No hidden examples for : value
Time to build dataset: 50 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:447.717551433093
Set score:0.0016226973252543944
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 9 13 21 33 35 37 69 81
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,114.907799 (regressionFit = 46,114.907798, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.907799): value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.907799 (regressionFit = 46,114.907798, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46114.90779874856
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.907800 (regressionFit = 46,114.907798, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.907800 (regressionFit = 46,114.907798, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.907800 (regressionFit = 46,114.907798, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.907800 (regressionFit = 46,114.907798, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46114.90779874857
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.907800 (regressionFit = 46,114.907798, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.907800 (regressionFit = 46,114.907798, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.907800 (regressionFit = 46,114.907798, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.816374 (regressionFit = 46,114.816372, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.816374): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.907800 (regressionFit = 46,114.907798, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.907800 (regressionFit = 46,114.907798, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 506.75178571929405 to score=0.0016226973252543944 #egs=91.0
Comparing variance: 0.033655944523794536 to score=0.0016226973252543944 #egs=12.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 91.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-506.751786)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -506.751786) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.033656)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0.033656) into the LAST position (#2) in the search queue.

% Time for loop #1: 97 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 91 positive examples, of which 91 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.816374 (regressionFit = 46,114.816372, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Have these 6 positive seeds: 6 7 22 49 68 85
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.816374): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-46114.81637394005
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.348595 (regressionFit = 46,114.348591, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -506.752.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0016226973252543944 #egs=83.0
Comparing variance: 439.30780476556487 to score=0.0016226973252543944 #egs=8.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 8.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-439.307805)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -439.307805) into position #2 in the search queue (new size=3).

% Time for loop #2: 274 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 1 8 23 33 49 59 61 65
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -513.251.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0016226973252543944 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0016226973252543944 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -545.477570) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 443 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 7 10 20 21 27 35 47
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon38735, Anon38101, D))

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/8.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.816374 (regressionFit = 46,114.816372, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.816374): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #5, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-46114.81637394005
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,114.8164):
%  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- tIn(Anon38101, destination, D))

% Have these 8 positive seeds: 0 2 3 4 5 6 7 8
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #6, bodyLen=0] 'value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -0.376948 (regressionFit = 0.376947, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.376948): value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]' score=-0.3769477186664988
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -0.376949 (regressionFit = 0.376947, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.290790 (regressionFit = 0.290787, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.290790): value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.376949 (regressionFit = 0.376947, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -0.290790 (regressionFit = 0.290787, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -0.376949 (regressionFit = 0.376947, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.034.
% Will extend: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: 0.0 to score=0.0016226973252543944 #egs=7.0
Comparing variance: 0.05815747213711695 to score=0.0016226973252543944 #egs=5.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0016226973252543944
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #6: 18 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 7 positive examples, of which 7 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree Combined @ 18:59:52 9/6/17.  [Using 2,035,848 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, source, A), bOn(C, B, A) )
%   then if ( tIn(D, destination, A) )
%   | then if ( bOn(E, D, A) )
%   | | then return -5.101332461867386E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.12306573461247705;  // std dev = 20.960, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tIn(F, source, A), tIn(G, destination, A) )
%   | then return 0;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.19690517537995617;  // std dev = 0.539, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */


% Clauses:

value(A, -5.101332461867386E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     bOn(E, D, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     !. // Clause #2.

value(A, -0.12306573461247705) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, 0) :- 
     tIn(B, source, A), 
     tIn(C, destination, A), 
     !. // Clause #4.

value(A, 0.19690517537995617) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, -5.101332461867386E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar41, source, a),
   bOn(underscore, uniqueVar41, a),
   tIn(uniqueVar42, destination, a),
   bOn(underscore, uniqueVar42, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(uniqueVar43, source, a),
   bOn(underscore, uniqueVar43, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #2.

flattened_value(a, -0.12306573461247705) :-  /* #pos=8 */ 
   tIn(uniqueVar44, source, a),
   bOn(underscore, uniqueVar44, a),
   !. // Flattened version of clause #3.

flattened_value(a, 0) :-  /* #pos=7 */ 
   tIn(underscore, source, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, 0.19690517537995617) :-  /* #pos=5 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   tIn(uniqueVar41, source, a)
%   tIn(uniqueVar44, source, a)
%   tIn(uniqueVar43, source, a)
%   tIn(uniqueVar42, destination, a)
%   bOn(underscore, uniqueVar44, a)
%   bOn(underscore, uniqueVar41, a)
%   bOn(underscore, uniqueVar42, a)
%   bOn(underscore, uniqueVar43, a)
%   tIn(underscore, destination, a)
%   tIn(underscore, source, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 11 trees is 19.663 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.033655944523794536
Set score:0.0016226973252543944
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:48 milliseconds
No hidden examples for : value
Time to build dataset: 49 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:447.71449298997885
Set score:0.0016226973252543944
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 9 24 27 55 59 80 83 89
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,114.554133 (regressionFit = 46,114.554131, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.554133): value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.472975 (regressionFit = 46,114.472974, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.472975): value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46114.47297471522
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.592780 (regressionFit = 46,114.592778, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.472976 (regressionFit = 46,114.472974, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.472976 (regressionFit = 46,114.472974, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.592780 (regressionFit = 46,114.592778, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46114.55413252955
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.554134 (regressionFit = 46,114.554131, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.592780 (regressionFit = 46,114.592778, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.554134 (regressionFit = 46,114.554131, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.572611 (regressionFit = 46,114.572609, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.554134 (regressionFit = 46,114.554131, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.472976 (regressionFit = 46,114.472974, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 461.14472973575226 to score=0.0016226973252543944 #egs=100.0
Comparing variance: 0.0 to score=0.0016226973252543944 #egs=3.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 100.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-461.144730)
%         ILP node to extend: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -461.144730) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 3.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 76 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 100 positive examples, of which 100 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.472975 (regressionFit = 46,114.472974, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 5 10 43 47 53 57 60 61
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.472975): value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-46114.47297471522
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.441571 (regressionFit = 46,114.441569, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.441571): value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.437694 (regressionFit = 46,114.437691, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.437694): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]' score=-46114.43769352546
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.437695 (regressionFit = 46,114.437691, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.455940 (regressionFit = 46,114.455937, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.437695 (regressionFit = 46,114.437691, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.437695 (regressionFit = 46,114.437691, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]' score=-46114.44157071026
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -46,114.441572 (regressionFit = 46,114.441569, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.441572 (regressionFit = 46,114.441569, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.441572 (regressionFit = 46,114.441569, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), bIn(_, source, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.455940 (regressionFit = 46,114.455937, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.460605 (regressionFit = 46,114.460602, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, source, A), tIn(B, destination, A), bOn(_, B, A).  [covers 78.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.441572 (regressionFit = 46,114.441569, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.437695 (regressionFit = 46,114.437691, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.437695 (regressionFit = 46,114.437691, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.441572 (regressionFit = 46,114.441569, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.437695 (regressionFit = 46,114.437691, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -461.145.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
Comparing variance: 506.75057132535323 to score=0.0016226973252543944 #egs=91.0
Comparing variance: 0.01507786314666024 to score=0.0016226973252543944 #egs=9.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 91.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-506.750571)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -506.750571) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 9.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-0.015078)
%         ILP node to extend: value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -0.015078) into the LAST position (#2) in the search queue.

% Time for loop #2: 178 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
% This clause covers 91 positive examples, of which 91 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.437694 (regressionFit = 46,114.437691, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 12 20 40 45 52 60 68 70
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.437694): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-46114.43769352546
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -506.751.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0016226973252543944 #egs=83.0
Comparing variance: 439.3078047655648 to score=0.0016226973252543944 #egs=8.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 8.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-439.307805)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -439.307805) into position #2 in the search queue (new size=3).

% Time for loop #3: 287 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 3 7 31 39 49 53 60 82
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 3 with score = -513.251.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0016226973252543944 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0016226973252543944 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -545.477570) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #4: 433 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 1 19 29 34 51 52 56 67
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #5, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon42881, Anon42247, D))

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/8.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.437694 (regressionFit = 46,114.437691, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.437694): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-46114.43769352546
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,114.4377):
%  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- tIn(Anon42247, destination, D))

% Working on expanding this node: 'value(A) :- tIn(_, source, A).  [covers 100.0/9.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.472975 (regressionFit = 46,114.472974, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.472975): value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #7, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-46114.47297471522
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #7, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #7, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), bIn(_, source, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #7, bodyLen=2] 'value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, destination, A).  [covers 7.0/9.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), bIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,114.4730):
%  value(A) :- tIn(_, source, A).  [covers 9.0/9.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon41757, Anon41487, D))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #12 @ 18:59:54 9/6/17.  [Using 2,044,000 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, source, A) )
%   then if ( bOn(C, B, A) )
%   | then if ( tIn(D, destination, A) )
%   | | then if ( bOn(E, D, A) )
%   | | | then return 2.1862853408003084E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -1.7763568394002505E-15;  // std dev = 20.960, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.06563505845998602;  // std dev = 0.123, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1969051753799569;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */


% Clauses:

value(A, 2.1862853408003084E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     bOn(E, D, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     !. // Clause #2.

value(A, -1.7763568394002505E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, 0.06563505845998602) :- 
     tIn(B, source, A), 
     !. // Clause #4.

value(A, -0.1969051753799569) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, 2.1862853408003084E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar45, source, a),
   bOn(underscore, uniqueVar45, a),
   tIn(uniqueVar46, destination, a),
   bOn(underscore, uniqueVar46, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(uniqueVar47, source, a),
   bOn(underscore, uniqueVar47, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #2.

flattened_value(a, -1.7763568394002505E-15) :-  /* #pos=8 */ 
   tIn(uniqueVar48, source, a),
   bOn(underscore, uniqueVar48, a),
   !. // Flattened version of clause #3.

flattened_value(a, 0.06563505845998602) :-  /* #pos=9 */ 
   tIn(underscore, source, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, -0.1969051753799569) :-  /* #pos=3 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   tIn(uniqueVar48, source, a)
%   bOn(underscore, uniqueVar46, a)
%   bOn(underscore, uniqueVar48, a)
%   bOn(underscore, uniqueVar45, a)
%   bOn(underscore, uniqueVar47, a)
%   tIn(uniqueVar47, source, a)
%   tIn(uniqueVar45, source, a)
%   tIn(uniqueVar46, destination, a)
%   tIn(underscore, destination, a)
%   tIn(underscore, source, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 12 trees is 21.434 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.015077863146660243
Set score:0.0016226973252543944
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:49 milliseconds
No hidden examples for : value
Time to build dataset: 50 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:447.7129872949074
Set score:0.0016226973252543944
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 8 10 12 30 40 46 52 77
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,114.414314 (regressionFit = 46,114.414313, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.414314): value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.437693 (regressionFit = 46,114.437691, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46114.414313721194
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.414315 (regressionFit = 46,114.414313, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.419110 (regressionFit = 46,114.419108, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.414315 (regressionFit = 46,114.414313, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.437694 (regressionFit = 46,114.437691, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46114.43769251546
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.419110 (regressionFit = 46,114.419108, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.437694 (regressionFit = 46,114.437691, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.437694 (regressionFit = 46,114.437691, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.437694 (regressionFit = 46,114.437691, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.414315 (regressionFit = 46,114.414313, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.437694 (regressionFit = 46,114.437691, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 458.06309073573175 to score=0.0016226973252543944 #egs=93.0
Comparing variance: 351.45468741581396 to score=0.0016226973252543944 #egs=10.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 93.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-458.063091)
%         ILP node to extend: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -458.063091) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 10.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-351.454687)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -351.454687) into the LAST position (#2) in the search queue.

% Time for loop #1: 79 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 93 positive examples, of which 93 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.414314 (regressionFit = 46,114.414313, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 7 11 30 36 37 72 75 77
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.414314): value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-46114.414313721194
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.867365 (regressionFit = 42,599.867363, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.867365): value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.852120 (regressionFit = 42,599.852117, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.852120): value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]' score=-42599.85211951857
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -42,599.852121 (regressionFit = 42,599.852117, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.855639 (regressionFit = 42,599.855636, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.852121 (regressionFit = 42,599.852117, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]' score=-42599.86736493353
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -42,599.867366 (regressionFit = 42,599.867363, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.867366 (regressionFit = 42,599.867363, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.867366 (regressionFit = 42,599.867363, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.855639 (regressionFit = 42,599.855636, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.848602 (regressionFit = 42,599.848599, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.848602): value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.867366 (regressionFit = 42,599.867363, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.852121 (regressionFit = 42,599.852117, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.852121 (regressionFit = 42,599.852117, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.867366 (regressionFit = 42,599.867363, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.852121 (regressionFit = 42,599.852117, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -458.063.
% Will extend: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0016226973252543944 #egs=83.0
Comparing variance: 9.046717887996044E-4 to score=0.0016226973252543944 #egs=10.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0016226973252543944

% Time for loop #2: 161 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.848602 (regressionFit = 42,599.848599, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 5 positive seeds: 9 50 53 58 76
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.848602): value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8486023805
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -513.251.
% Will extend: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0016226973252543944 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0016226973252543944 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -545.477570) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 423 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 18 30 39 51 55 56 68 70
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon46433, Anon45659, D))

% Have these 8 positive seeds: 0 1 2 3 4 5 7 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #5, bodyLen=0] 'value(_).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 1.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/10.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 0.  Pruned 0 variant children.  Sending 2 items to OPEN for evaluation and possible insertion.
% Have created 2 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 10.0/10.0 pos, 0.0/0.0 neg]

% The best node found: null

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -Infinity):
%  null
Created a leaf under (value(D) :- tIn(Anon45659, destination, D))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #13 @ 18:59:55 9/6/17.  [Using 2,055,976 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, destination, A) )
%   then if ( tIn(C, source, A), bOn(D, C, A) )
%   | then if ( bOn(E, B, A) )
%   | | then return -5.101332461867386E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.04594454092198994;  // std dev = 0.095, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return 0.04594454092198674;  // std dev = 18.747, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */


% Clauses:

value(A, -5.101332461867386E-15) :- 
     tIn(B, destination, A), 
     tIn(C, source, A), 
     bOn(D, C, A), 
     bOn(E, B, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, destination, A), 
     tIn(C, source, A), 
     bOn(D, C, A), 
     !. // Clause #2.

value(A, -0.04594454092198994) :- 
     tIn(B, destination, A), 
     !. // Clause #3.

value(A, 0.04594454092198674) :- !. // Clause #4.


% The flattened versions of these clauses:

flattened_value(a, -5.101332461867386E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar49, destination, a),
   tIn(uniqueVar50, source, a),
   bOn(underscore, uniqueVar50, a),
   bOn(underscore, uniqueVar49, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(underscore, destination, a),
   tIn(uniqueVar51, source, a),
   bOn(underscore, uniqueVar51, a),
   !. // Flattened version of clause #2.

flattened_value(a, -0.04594454092198994) :-  /* #pos=10 */ 
   tIn(underscore, destination, a),
   !. // Flattened version of clause #3.

flattened_value(underscore, 0.04594454092198674) :-  /* #pos=10 */ 
   !. // Flattened version of clause #4.


% The unique flattened literals:
%   tIn(uniqueVar50, source, a)
%   bOn(underscore, uniqueVar51, a)
%   bOn(underscore, uniqueVar49, a)
%   tIn(uniqueVar51, source, a)
%   bOn(underscore, uniqueVar50, a)
%   tIn(uniqueVar49, destination, a)
%   tIn(underscore, destination, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 13 trees is 22.934 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:351.45468741581396
Set score:0.0016226973252543944
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:81 milliseconds
No hidden examples for : value
Time to build dataset: 82 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:447.712577411249
Set score:0.0016226973252543944
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 12 19 36 37 38 43 49 52
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,114.388952 (regressionFit = 46,114.388951, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.388952): value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.395474 (regressionFit = 46,114.395473, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46114.38895181505
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.388953 (regressionFit = 46,114.388951, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.393803 (regressionFit = 46,114.393801, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.388953 (regressionFit = 46,114.388951, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.382733 (regressionFit = 46,114.382731, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.382733): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46114.39547449864
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.393803 (regressionFit = 46,114.393801, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.395476 (regressionFit = 46,114.395473, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.395476 (regressionFit = 46,114.395473, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.394377 (regressionFit = 46,114.394375, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.388953 (regressionFit = 46,114.388951, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.395476 (regressionFit = 46,114.395473, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 506.750740584882 to score=0.0016226973252543944 #egs=91.0
Comparing variance: 0.005444783914071739 to score=0.0016226973252543944 #egs=12.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 91.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-506.750741)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -506.750741) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 12.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-0.005445)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -0.005445) into the LAST position (#2) in the search queue.

% Time for loop #1: 107 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 91 positive examples, of which 91 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.382733 (regressionFit = 46,114.382731, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Have these 6 positive seeds: 5 13 14 51 61 63
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.382733): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-46114.38273278123
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.308490 (regressionFit = 46,114.308486, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -506.751.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0016226973252543944 #egs=83.0
Comparing variance: 439.3078047655648 to score=0.0016226973252543944 #egs=8.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 8.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-439.307805)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -439.307805) into position #2 in the search queue (new size=3).

% Time for loop #2: 283 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 6 positive seeds: 9 36 38 49 68 81
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -513.251.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0016226973252543944 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0016226973252543944 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -545.477570) into position #1 in the search queue (new size=3).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #3: 448 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 4 12 30 43 52 54 55 57
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon49605, Anon48971, D))

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/8.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.382733 (regressionFit = 46,114.382731, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.382733): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #5, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-46114.38273278123
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,114.3827):
%  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- tIn(Anon48971, destination, D))

% Have these 8 positive seeds: 0 1 3 4 5 6 8 9
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #6, bodyLen=0] 'value(_).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -0.064400 (regressionFit = 0.064399, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.064400): value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]' score=-0.06440036881751317
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -0.064401 (regressionFit = 0.064399, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.022800 (regressionFit = 0.022798, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -0.022800): value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.064401 (regressionFit = 0.064399, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -0.022800 (regressionFit = 0.022798, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -0.064401 (regressionFit = 0.064399, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 3.0/12.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -0.064401 (regressionFit = 0.064399, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 9.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 10.0/12.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 12.0/12.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -0.005.
% Will extend: value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
Comparing variance: -6.195440985631454E-20 to score=0.0016226973252543944 #egs=7.0
Comparing variance: 0.00455954581555007 to score=0.0016226973252543944 #egs=5.0
%   Creating a TRUE-branch leaf because good enough fit since score < 0.0016226973252543944
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #6: 26 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #6, the best clause found is:
%      value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 7.0/12.0 pos, 0.0/0.0 neg]
% This clause covers 7 positive examples, of which 7 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #14 @ 18:59:57 9/6/17.  [Using 2,067,928 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, source, A), bOn(C, B, A) )
%   then if ( tIn(D, destination, A) )
%   | then if ( bOn(E, D, A) )
%   | | then return 2.1862853408003084E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.04594454092198941;  // std dev = 20.960, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tIn(F, source, A), tIn(G, destination, A) )
%   | then return -0.019690517537995333;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.10107799002837865;  // std dev = 0.151, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */


% Clauses:

value(A, 2.1862853408003084E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     bOn(E, D, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     !. // Clause #2.

value(A, -0.04594454092198941) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, -0.019690517537995333) :- 
     tIn(B, source, A), 
     tIn(C, destination, A), 
     !. // Clause #4.

value(A, 0.10107799002837865) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, 2.1862853408003084E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar52, source, a),
   bOn(underscore, uniqueVar52, a),
   tIn(uniqueVar53, destination, a),
   bOn(underscore, uniqueVar53, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(uniqueVar54, source, a),
   bOn(underscore, uniqueVar54, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #2.

flattened_value(a, -0.04594454092198941) :-  /* #pos=8 */ 
   tIn(uniqueVar55, source, a),
   bOn(underscore, uniqueVar55, a),
   !. // Flattened version of clause #3.

flattened_value(a, -0.019690517537995333) :-  /* #pos=7 */ 
   tIn(underscore, source, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, 0.10107799002837865) :-  /* #pos=5 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   bOn(underscore, uniqueVar54, a)
%   tIn(uniqueVar53, destination, a)
%   bOn(underscore, uniqueVar52, a)
%   bOn(underscore, uniqueVar55, a)
%   tIn(uniqueVar55, source, a)
%   tIn(uniqueVar52, source, a)
%   tIn(uniqueVar54, source, a)
%   bOn(underscore, uniqueVar53, a)
%   tIn(underscore, destination, a)
%   tIn(underscore, source, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 14 trees is 24.639 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:0.005444783914071738
Set score:0.0013611959785179346
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:78 milliseconds
No hidden examples for : value
Time to build dataset: 78 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:447.71189114889535
Set score:0.0013611959785179346
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 2 7 18 36 51 59 68 81
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,114.315397 (regressionFit = 46,114.315396, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.315397): value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.321760 (regressionFit = 46,114.321758, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46114.31539681184
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.315398 (regressionFit = 46,114.315396, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.324791 (regressionFit = 46,114.324788, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.315398 (regressionFit = 46,114.315396, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.324790 (regressionFit = 46,114.324788, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46114.32175958447
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.324791 (regressionFit = 46,114.324788, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.321761 (regressionFit = 46,114.321758, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.321761 (regressionFit = 46,114.321758, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.323209 (regressionFit = 46,114.323207, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.315398 (regressionFit = 46,114.315396, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.321761 (regressionFit = 46,114.321758, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 461.14315395671844 to score=0.0013611959785179346 #egs=100.0
Comparing variance: 0.0 to score=0.0013611959785179346 #egs=3.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 100.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-461.143154)
%         ILP node to extend: value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -461.143154) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 3.0 < 2.1 * minPosCov = 6.3

% Time for loop #1: 121 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 100 positive examples, of which 100 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.315397 (regressionFit = 46,114.315396, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]

% Have these 6 positive seeds: 23 30 44 51 67 92
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.315397): value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-46114.31539681184
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312936 (regressionFit = 46,114.312934, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.312936): value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312632 (regressionFit = 46,114.312630, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.312632): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]' score=-46114.31263169738
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.312633 (regressionFit = 46,114.312630, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.314063 (regressionFit = 46,114.314060, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312633 (regressionFit = 46,114.312630, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312633 (regressionFit = 46,114.312630, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]' score=-46114.31293568709
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -46,114.312937 (regressionFit = 46,114.312934, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312937 (regressionFit = 46,114.312934, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312937 (regressionFit = 46,114.312934, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A), bIn(_, source, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.314063 (regressionFit = 46,114.314060, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.314429 (regressionFit = 46,114.314426, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, source, A), tIn(B, destination, A), bOn(_, B, A).  [covers 78.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312937 (regressionFit = 46,114.312934, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312633 (regressionFit = 46,114.312630, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312633 (regressionFit = 46,114.312630, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, source, A), tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312937 (regressionFit = 46,114.312934, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), tIn(_, destination, A).  [covers 90.0/100.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A), bIn(_, source, A).  [covers 100.0/100.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312633 (regressionFit = 46,114.312630, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -461.143.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
Comparing variance: 506.75057132535323 to score=0.0013611959785179346 #egs=91.0
Comparing variance: 0.0011821044706981465 to score=0.0013611959785179346 #egs=9.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 91.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-506.750571)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -506.750571) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0013611959785179346

% Time for loop #2: 283 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/100.0 pos, 0.0/0.0 neg]
% This clause covers 91 positive examples, of which 91 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.312632 (regressionFit = 46,114.312630, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 9 11 19 23 33 73 78 89
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.312632): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-46114.31263169738
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.301995 (regressionFit = 46,114.301991, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]

% Expanding node at Level 2 with score = -506.751.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0013611959785179346 #egs=83.0
Comparing variance: 439.3078047655648 to score=0.0013611959785179346 #egs=8.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -513.251079) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 8.0
%      addToQueueOfTreeStructuredLearningTasks (level=3; score=-439.307805)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/91.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 3 and with score = -439.307805) into the LAST position (#2) in the search queue.

% Time for loop #3: 350 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #3, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/91.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.301994 (regressionFit = 46,114.301991, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 28 30 50 57 58 59 62
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.301994): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #4, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-46114.30199378713
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #4, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Expanding node at Level 3 with score = -513.251.
% Will extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
Comparing variance: 545.4775699121537 to score=0.0013611959785179346 #egs=78.0
Comparing variance: 10.517819866922943 to score=0.0013611959785179346 #egs=5.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 78.0
%      addToQueueOfTreeStructuredLearningTasks (level=4; score=-545.477570)
%         ILP node to extend: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 4 and with score = -545.477570) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch leaf because wgtedCountFalseBranchPos = 5.0 < 2.1 * minPosCov = 6.3

% Time for loop #4: 505 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #4, the best clause found is:
%      value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% This clause covers 78 positive examples, of which 78 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Have these 7 positive seeds: 10 16 26 33 45 64 65
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #5, bodyLen=4] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, destination, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 4 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.010000000000002E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), tIn(D, source, A), bOn(_, D, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 2.  Pruned 4 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 4 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bIn(_, source, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 1.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% Consider expanding [#6 of outerLoop #5, bodyLen=5] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 6, |OPEN| = 0.  Pruned 3 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 3 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, destination, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), tIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.210000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bIn(_, source, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=6.110000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A), bOn(_, C, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -42,599.8396):
%  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, destination, A), bOn(_, C, A).  [covers 78.0/78.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- bOn(Anon53747, Anon53133, D))

% Working on expanding this node: 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/8.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.312632 (regressionFit = 46,114.312630, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 0 1 2 3 4 5 6 7
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.312632): value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #6, bodyLen=2] 'value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-46114.31263169738
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.260000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.07E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 1 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bIn(_, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #6, bodyLen=3] 'value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), tIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.270000000000001E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bIn(_, source, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.17E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A), bOn(_, B, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]

% No acceptable clause was learned on this cycle of the ILP inner loop (LearnOneClause).
% The closest-to-acceptable node found (score = -46,114.3126):
%  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 8.0/8.0 pos, 0.0/0.0 neg]
Created a leaf under (value(D) :- tIn(Anon53133, destination, D))

% ******************************************

%  Have stopped ILP's outer loop because the tree-structured queue is empty.

% ******************************************

%%%%%  WILL-Produced Tree #15 @ 18:59:59 9/6/17.  [Using 2,075,112 memory cells.]  %%%%%


% FOR value(A):
%   if ( tIn(B, source, A) )
%   then if ( bOn(C, B, A) )
%   | then if ( tIn(D, destination, A) )
%   | | then if ( bOn(E, D, A) )
%   | | | then return -5.101332461867386E-15;  // std dev = 23.355, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | | else return -7.105427357601002E-16;  // std dev = 7.252, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -1.7763568394002505E-15;  // std dev = 20.960, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.01837781636879596;  // std dev = 0.103, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.055133449106389065;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */


% Clauses:

value(A, -5.101332461867386E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     bOn(E, D, A), 
     !. // Clause #1.

value(A, -7.105427357601002E-16) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     tIn(D, destination, A), 
     !. // Clause #2.

value(A, -1.7763568394002505E-15) :- 
     tIn(B, source, A), 
     bOn(C, B, A), 
     !. // Clause #3.

value(A, 0.01837781636879596) :- 
     tIn(B, source, A), 
     !. // Clause #4.

value(A, -0.055133449106389065) :- !. // Clause #5.


% The flattened versions of these clauses:

flattened_value(a, -5.101332461867386E-15) :-  /* #pos=78 */ 
   tIn(uniqueVar56, source, a),
   bOn(underscore, uniqueVar56, a),
   tIn(uniqueVar57, destination, a),
   bOn(underscore, uniqueVar57, a),
   !. // Flattened version of clause #1.

flattened_value(a, -7.105427357601002E-16) :-  /* #pos=5 */ 
   tIn(uniqueVar58, source, a),
   bOn(underscore, uniqueVar58, a),
   tIn(underscore, destination, a),
   !. // Flattened version of clause #2.

flattened_value(a, -1.7763568394002505E-15) :-  /* #pos=8 */ 
   tIn(uniqueVar59, source, a),
   bOn(underscore, uniqueVar59, a),
   !. // Flattened version of clause #3.

flattened_value(a, 0.01837781636879596) :-  /* #pos=9 */ 
   tIn(underscore, source, a),
   !. // Flattened version of clause #4.

flattened_value(underscore, -0.055133449106389065) :-  /* #pos=3 */ 
   !. // Flattened version of clause #5.


% The unique flattened literals:
%   bOn(underscore, uniqueVar57, a)
%   tIn(uniqueVar58, source, a)
%   bOn(underscore, uniqueVar59, a)
%   bOn(underscore, uniqueVar56, a)
%   bOn(underscore, uniqueVar58, a)
%   tIn(uniqueVar57, destination, a)
%   tIn(uniqueVar56, source, a)
%   tIn(underscore, destination, a)
%   tIn(uniqueVar59, source, a)
%   tIn(underscore, source, a)

% Saving model in: train/models/bRDNs/value.model.ckpt
% Time taken to learn 15 trees is 26.730 seconds.

%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:439.3078047655648
Set score:0.0013611959785179346
% Kept 103 of the 103 positive examples.
% Kept 0 of the 0 negative examples.
% Dataset size: 103
Computing probabilities
prob time:60 milliseconds
No hidden examples for : value
Time to build dataset: 62 milliseconds
%      addToQueueOfTreeStructuredLearningTasks (level=0; score=1.797693135e+308)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 0 and with score = 1.797693135e+308) into the LAST position (#1) in the search queue.
Variance:447.7117731024017
Set score:0.0013611959785179346
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% Have these 8 positive seeds: 5 12 18 21 23 33 48 53
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.

% target           = value(D)
%     Score = -Infinity (regressionFit = Infinity, penalties=1.1E-7) for clause:  value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]
% Unacceptable due to being the root node.
% Most-general root: value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]  score = -Infinity

% Consider expanding [#1 of outerLoop #1, bodyLen=0] 'value(_).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants.
%     Score = -46,114.312631 (regressionFit = 46,114.312630, penalties=1.14E-6) for clause:  value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.312631): value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.310798 (regressionFit = 46,114.310797, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -46,114.310798): value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=1.14E-6) for clause:  value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]' score=-46114.31079778989
%  At # nodes expanded = 2, |OPEN| = 2.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.311175 (regressionFit = 46,114.311173, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.310799 (regressionFit = 46,114.310797, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.310799 (regressionFit = 46,114.310797, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312632 (regressionFit = 46,114.312630, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #1, bodyLen=1] 'value(A) :- tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]' score=-46114.312630687375
%  At # nodes expanded = 3, |OPEN| = 1.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -46,114.312632 (regressionFit = 46,114.312630, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.311175 (regressionFit = 46,114.311173, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312632 (regressionFit = 46,114.312630, penalties=2.2500000000000005E-6) for clause:  value(A) :- tIn(_, source, A), bIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.312632 (regressionFit = 46,114.312630, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, source, A), bOn(_, B, A).  [covers 91.0/103.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #1, bodyLen=1] 'value(A) :- bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 0.  Pruned 0 variant children.  Sending 3 items to OPEN for evaluation and possible insertion.
% Have created 3 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -46,114.312632 (regressionFit = 46,114.312630, penalties=2.2500000000000005E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, source, A).  [covers 100.0/103.0 pos, 0.0/0.0 neg]
%     Score = -46,114.310799 (regressionFit = 46,114.310797, penalties=2.2700000000000003E-6) for clause:  value(A) :- bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- bIn(_, source, A), bIn(_, source, A).  [covers 103.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]

% Expanding node at Level 0 with score = 1.797693e+308.
% Will extend: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
Comparing variance: 458.0628143950574 to score=0.0013611959785179346 #egs=93.0
Comparing variance: 351.44690579095544 to score=0.0013611959785179346 #egs=10.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 93.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-458.062814)
%         ILP node to extend: value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 1 and with score = -458.062814) into the LAST position (#1) in the search queue.
%   Creating a FALSE-branch interior node with wgtedCountFalseBranchPos = 10.0
%      addToQueueOfTreeStructuredLearningTasks (level=1; score=-351.446906)
%         ILP node to extend: null
%      Insert tree-structured search node (@ level = 1 and with score = -351.446906) into the LAST position (#2) in the search queue.

% Time for loop #1: 87 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #1, the best clause found is:
%      value(A) :- tIn(_, destination, A).  [covers 93.0/103.0 pos, 0.0/0.0 neg]
% This clause covers 93 positive examples, of which 93 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]'
%     Score = -46,114.310798 (regressionFit = 46,114.310797, penalties=1.14E-6) for clause:  value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]

% Have these 6 positive seeds: 16 17 38 63 77 91
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -46,114.310798): value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #2, bodyLen=1] 'value(A) :- tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-46114.31079778989
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.841735 (regressionFit = 42,599.841733, penalties=2.1700000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.841735): value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=2.2700000000000003E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.840540 (regressionFit = 42,599.840538, penalties=2.1500000000000006E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.840540): value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]' score=-42599.84053971967
%  At # nodes expanded = 2, |OPEN| = 3.  Pruned 0 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants.
%     Score = -42,599.840541 (regressionFit = 42,599.840538, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, destination, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.840817 (regressionFit = 42,599.840813, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.840541 (regressionFit = 42,599.840538, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bIn(_, source, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.840541 (regressionFit = 42,599.840538, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bOn(_, B, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]' score=-42599.84173497863
%  At # nodes expanded = 3, |OPEN| = 2.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -42,599.841736 (regressionFit = 42,599.841733, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, destination, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.841736 (regressionFit = 42,599.841733, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.841736 (regressionFit = 42,599.841733, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, source, A), bIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.840817 (regressionFit = 42,599.840813, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.840265 (regressionFit = 42,599.840262, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.840265): value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 4, |OPEN| = 1.  Pruned 0 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.1600000000000002E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.841736 (regressionFit = 42,599.841733, penalties=3.180000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.840541 (regressionFit = 42,599.840538, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(_, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.840541 (regressionFit = 42,599.840538, penalties=3.160000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, destination, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% Consider expanding [#5 of outerLoop #2, bodyLen=2] 'value(A) :- tIn(_, destination, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 5, |OPEN| = 0.  Pruned 1 variant children.  Sending 4 items to OPEN for evaluation and possible insertion.
% Have created 4 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, destination, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.841736 (regressionFit = 42,599.841733, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), tIn(_, source, A).  [covers 90.0/93.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), bIn(_, source, A), bIn(_, source, A).  [covers 93.0/93.0 pos, 0.0/0.0 neg]
%     Score = -42,599.840541 (regressionFit = 42,599.840538, penalties=3.280000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), bIn(_, source, A), bOn(_, B, A).  [covers 81.0/93.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% The best node found: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]

% Expanding node at Level 1 with score = -458.063.
% Will extend: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
Comparing variance: 513.2510789455737 to score=0.0013611959785179346 #egs=83.0
Comparing variance: 7.092626824188727E-5 to score=0.0013611959785179346 #egs=10.0
%   Creating a TRUE-branch interior node with wgtedCountTrueBranchPos = 83.0
%      addToQueueOfTreeStructuredLearningTasks (level=2; score=-513.251079)
%         ILP node to extend: value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
%      Insert tree-structured search node (@ level = 2 and with score = -513.251079) into position #1 in the search queue (new size=2).
%   Creating a FALSE-branch leaf because good enough fit since score < 0.0013611959785179346

% Time for loop #2: 186 milliseconds.
% Internal node max length = 2
% Max tree depth in lits   = 12
% Max tree depth in nodes  = 5
% Max number of clauses    = 8

% On cycle #2, the best clause found is:
%      value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/93.0 pos, 0.0/0.0 neg]
% This clause covers 83 positive examples, of which 83 are newly covered.
% It also covers 0 negative examples, of which 0 are newly covered.

% Working on expanding this node: 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]'
%     Score = -42,599.840265 (regressionFit = 42,599.840262, penalties=3.1800000000000017E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Have these 8 positive seeds: 8 15 16 18 21 32 33 42
% [AdviceProcessor]  Generated 0 clauses at relevance level STRONGLY_IRRELEVANT.
% Gleaner: New best node found (score = -42,599.840265): value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#1 of outerLoop #3, bodyLen=3] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8402649253
%  At # nodes expanded = 1, |OPEN| = 0.  Pruned 1 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 1 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.2900000000000004E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839557 (regressionFit = 42,599.839552, penalties=4.090000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
% Gleaner: New best node found (score = -42,599.839557): value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=4.1900000000000005E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#2 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]' score=-42599.8395565726
%  At # nodes expanded = 2, |OPEN| = 4.  Pruned 2 variant children.  Sending 5 items to OPEN for evaluation and possible insertion.
% Have created 5 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), tIn(_, destination, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bIn(_, source, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), bOn(_, B, A), bOn(_, C, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#3 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity
%  At # nodes expanded = 3, |OPEN| = 3.  Pruned 2 variant children.  Sending 6 items to OPEN for evaluation and possible insertion.
% Have created 6 valid-on-seeds descendants and have picked up 2 bad extensions.
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.300000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bIn(_, source, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -42,599.839558 (regressionFit = 42,599.839552, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(B, destination, A), tIn(C, source, A), bOn(_, C, A), tIn(_, source, A), bOn(_, B, A).  [covers 78.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.200000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, source, A), bOn(_, B, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]
%     Score = -Infinity (regressionFit = Infinity, penalties=5.100000000000001E-6) for clause:  value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(C, source, A), bOn(_, C, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]

% Consider expanding [#4 of outerLoop #3, bodyLen=4] 'value(A) :- tIn(_, destination, A), tIn(B, source, A), bOn(_, B, A), tIn(_, destination, A).  [covers 83.0/83.0 pos, 0.0/0.0 neg]' score=-Infinity

***** Warning: #1 TOO MUCH TIME SPENT for 'HornClauseProver': '22 minutes and 49 seconds' vs. '5 minutes and 0 seconds'. *****

