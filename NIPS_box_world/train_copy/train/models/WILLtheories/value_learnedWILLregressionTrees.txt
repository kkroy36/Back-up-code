usePrologVariables: true.

% maxTreeDepthInNodes                 = 5
% maxTreeDepthInLiterals              = 12
% maxNumberOfLiteralsAtAnInteriorNode = 2
% maxFreeBridgersInBody               = 1
% maxNumberOfClauses                  = 8
% maxNodesToConsider                  = 10
% maxNodesToCreate                    = 10,000
% maxAcceptableNodeScoreToStop        = 0.003
% negPosRatio                         = 2.000
% testNegPosRatio                     = -1.000
% # of pos examples                   = 9
% # of neg examples                   = 0



%%%%%  WILL-Produced Tree #1 @ 3:53:10 8/30/17.  [Using 3,332,600 memory cells.]  %%%%%

% FOR value(A):
%   if ( tIn(B, destination, A), bOn(C, B, A) )
%   then return 55.461022776549804;  // std dev = 3.687, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 41.97412533090704;  // std dev = 5.945, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */


% Clauses:

value(A, 55.461022776549804) :- 
     tIn(B, destination, A), 
     bOn(C, B, A), 
     !. // Clause #1.

value(A, 41.97412533090704) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_value(a, 55.461022776549804) :-  /* #pos=6 */ 
   tIn(uniqueVar1, destination, a),
   bOn(underscore, uniqueVar1, a),
   !. // Flattened version of clause #1.

flattened_value(underscore, 41.97412533090704) :-  /* #pos=3 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   tIn(uniqueVar1, destination, a)
%   bOn(underscore, uniqueVar1, a)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%  Final call for computing score for value.  %%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

stepLength_tree1(1.0).

logPrior(0.0).
value(D, Total) :- // A general accessor. 
   value(D, 1000000, Total), !.
value(D, Total) :- waitHere("This should not fail", value(D, Total)).

value(D, TreesToUse, Total) :- // A tree-limited accessor (e.g., for tuning the number of trees to use).
   logPrior(LogPrior),
   getScore_value_tree1(D, TreesToUse, Total1),
   Total is LogPrior + Total1,
   !.
value(D, TreesToUse, Total) :- waitHere("This should not fail", value(D, TreesToUse, Total)).

getScore_value_tree1(D, TreesToUse, 0.0) :- 1 > TreesToUse, !.
getScore_value_tree1(D, TreesToUse, Total1) :- value_tree1(D, Total), stepLength_tree1(StepLen), Total1 is Total * StepLen.

flattenedLiteralsInThisSetOfTrees(value, 2, [
   tIn(uniqueVar1, destination, a),
   bOn(underscore, uniqueVar1, a)]).

%%%%%  WILL-Produced Tree Combined @ 3:53:11 8/30/17.  [Using 1,502,840 memory cells.]  %%%%%

% FOR value(A):
%   if ( tIn(B, destination, A), bOn(C, B, A) )
%   then return 55.461022776549804;  // std dev = 3.687, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return 41.97412533090704;  // std dev = 5.945, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */


% Clauses:

value(A, 55.461022776549804) :- 
     tIn(B, destination, A), 
     bOn(C, B, A), 
     !. // Clause #1.

value(A, 41.97412533090704) :- !. // Clause #2.


% The flattened versions of these clauses:

flattened_value(a, 55.461022776549804) :-  /* #pos=6 */ 
   tIn(uniqueVar2, destination, a),
   bOn(underscore, uniqueVar2, a),
   !. // Flattened version of clause #1.

flattened_value(underscore, 41.97412533090704) :-  /* #pos=3 */ 
   !. // Flattened version of clause #2.


% The unique flattened literals:
%   tIn(uniqueVar2, destination, a)
%   bOn(underscore, uniqueVar2, a)
